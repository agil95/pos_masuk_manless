/*! \file ice_com_type.h
\brief ice_com_type.h document.
*/
#ifndef _ICE_COM_TYPE_H_
#define _ICE_COM_TYPE_H_

#include "ice_base_type.h"

//! \defgroup group_communication 
//! \{
//! \}

#ifdef __cplusplus
extern "C"
{
#endif


#define ICE_BUF_SIZE_CONTROL	(64-32)
#define ICE_BUF_SIZE_EVENT		(64-32)
#define ICE_BUF_SIZE_VPRO		(16*1024-32)
#define ICE_BUF_SIZE_CONFIG		(128*1024-32)

#define ICE_BUFLEN_PACKET	(1024*512)

#define ICE_EVENT_ID_SLAVE_MIN	0x00000000
#define ICE_EVENT_ID_SLAVE_MAX	0xFFFFFFFF

#define ICE_BUF_SIZE_FRAME		(1920*1080*2 + 128)

typedef struct 
{
	int enable;     
	int defalut_state;    //0 off ,1 on, default 1
	int dayJudgeCnt;   //100 cnt
	int nightJudgeCnt;    //10 cnt
	int day_to_night_delay;  // 5s
	int night_to_day_delay; // 90s
	int photosensitive_day_limit;  //75
	int photosensitive_night_limit; //40
	int  reserved[5];
} ISP_light_switch_param;


//! \ingroup group_communication
//! 
typedef enum
{
	ICE_STATUS_SUCCESS				= 0x00000000,		
	ICE_STATUS_COMMAND				= 0x00010000,		
	ICE_STATUS_ERROR2				= 0x00080000,		
	ICE_STATUS_ERROR_NOT_FOUND		= 0x00080001,		
	ICE_STATUS_ERROR_NOT_SUPPORTED	= 0x00080002,		
} ICE_COM_STATUS_E;

//! \ingroup group_communication
//! 
typedef struct 
{
	ICE_U32	u32Size;							
	ICE_U32	u32Type;							
	ICE_U32	u32Status;							
	ICE_U32	u32Channel;							
	ICE_U32	u32Time;						
	ICE_U32	u32Date;							
	ICE_U32	u32Id;								
	ICE_U32	u32Level;							
} ICE_OPER_DATA_S;

typedef struct
{
	ICE_U32	u32Size;							
	ICE_U8	u8SDKType;						
	ICE_U8	u8Reserved[127];					
}ICE_NET_CONN_INFO_S;
///////////////////////////////////////////////////////////////////////////////////////////////////
// 控制相关数据类型

// 语音播报
typedef struct
{
	char filename[128];		//filename，.g711a
	int index;				//index

	char reserved[124];
	
} Broadcast_Param;

typedef struct
{
	unsigned char idle_state;
	unsigned int delay_time;
	
} relay_output;


typedef struct
{
	unsigned int IPaddr;
	unsigned int netmaskAddr;
	unsigned int gatewayAddr;
}NET_BASE_PARAM;

typedef enum
{
	ICE_NET_CONN_STAT_PC_SDK_OFFLINE = 0x00,
	ICE_NET_CONN_STAT_PC_SDK_ONLINE = 0x01,
	ICE_NET_CONN_STAT_BOARD_SDK_OFFLINE = 0x02,
	ICE_NET_CONN_STAT_BOARD_SDK_ONLINE = 0x03,
	ICE_NET_CONN_STAT_UNKNOW
}ICE_NET_CONN_STAT_TYPE_E;

typedef struct 
{
	ICE_NET_CONN_STAT_TYPE_E eNetStat;
	ICE_S32	s32Reserved[8];
}ICE_NET_CONN_STAT_S;

//! \ingroup group_communication
//! 
typedef enum
{		
	ICE_CONTROL_TYPE_BASE 						= 0x1000,			
	ICE_CONTROL_TYPE_VDR_ARM					= 0x1001,			
	ICE_CONTROL_TYPE_VDR_ARM_RSP				= 0x1002,			
	ICE_CONTROL_TYPE_VDR_DISARM					= 0x1003,			
	ICE_CONTROL_TYPE_VDR_DISARM_RSP			    = 0x1004,			
	ICE_CONTROL_TYPE_VDR_CLEAR_ALARAM			= 0x1005,			
	ICE_CONTROL_TYPE_VDR_CLEAR_ALARAM_RSP     	= 0x1006,			
	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA		= 0x1007,			
	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_RSP = 0x1008,			
	ICE_CONTROL_TYPE_STREAM_CONNECT			    = 0x1010,			
	ICE_CONTROL_TYPE_STREAM_CONNECT_RSP     	= 0x1011,			
	ICE_CONTROL_TYPE_STREAM_DISCONNECT			= 0x1012,			
	ICE_CONTROL_TYPE_STREAM_DISCONNECT_RSP     	= 0x1013,			
	ICE_CONTROL_TYPE_RESTART					= 0x1020,			
	ICE_CONTROL_TYPE_RESTART_RSP     			= 0x1021,		
	ICE_CONTROL_TYPE_HEART_BEAT					= 0x1022,			
	ICE_CONTROL_TYPE_HEART_BEAT_RSP     		= 0x1023,			
	ICE_CONTROL_TYPE_ERROR_REPORT				= 0x1024,			
	ICE_CONTROL_TYPE_ERROR_REPORT_RSP     		= 0x1025,				
	ICE_CONTROL_TYPE_REQUEST_COUNT				= 0x1026,			
	ICE_CONTROL_TYPE_REQUEST_COUNT_RSP     		= 0x1027,			
	ICE_CONTROL_TYPE_TALK_DATA					= 0x1028,			
	ICE_CONTROL_TYPE_TALK_BEGIN					= 0x1029,			
	ICE_CONTROL_TYPE_TALK_END					= 0x1030,			
	ICE_CONTROL_TYPE_SDCARD_FORMAT              = 0x1031,          
	ICE_CONTROL_TYPE_SDCARD_FORMAT_RSP          = 0x1032,           
	ICE_CONTROL_TYPE_CAPTURE					= 0x1033,          
	ICE_CONTROL_TYPE_CAPTURE_RSP				= 0x1034,           
	ICE_CONTROL_TYPE_SDCARD_UNLOAD				= 0x1035,			
	ICE_CONTROL_TYPE_SDCARD_UNLOAD_RSP			= 0x1036,			
	
	ICE_CONTROL_TYPE_TRANS_SERIAL_PORT			= 0x1037,           
	ICE_CONTROL_TYPE_TRANS_SERIAL_PORT_RSP		= 0x1038,           
	
	ICE_CONTROL_TYPE_BROADCSAT					= 0x1039,           
	ICE_CONTROL_TYPE_BROADCSAT_RSP				= 0x1040,           
	
	ICE_CONTROL_TYPE_BROADCSAT_WAV				= 0x104A,			
	ICE_CONTROL_TYPE_BROADCSAT_WAV_RSP			= 0x104B,			

	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_PASSWD		= 0x1041,			
	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_PASSWD_RSP	= 0x1042,			
	
	ICE_CONTROL_TYPE_TRANS_SERIAL_PORT_RS232			= 0x1043,           
	ICE_CONTROL_TYPE_TRANS_SERIAL_PORT_RS232_RSP		= 0x1044,          
	
	ICE_CONTROL_TYPE_GET_IO_IN_STATE							= 0x1045,		
	ICE_CONTROL_TYPE_GET_IO_IN_STATE_RSP					= 0x1046,			

	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_NO_PIC	= 0x1047,			
	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_NO_PIC_RSP = 0x1048,				

	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_NO_PIC_PASSWD = 0x1049,			
	ICE_CONTROL_TYPE_VDR_REQUEST_ALARM_DATA_NO_PIC_PASSWD_RSP = 0x1050,			
	ICE_CONTROL_TYPE_GET_CAMERA_HARDWARE_INFO	= 0x1051,			
	ICE_CONTROL_TYPE_GET_CAMERA_HARDWARE_INFO_RSP = 0x1052,			
	
	ICE_CONTROL_TYPE_GET_CAMERA_SOFTWARE_INFO	= 0x1053,			
	ICE_CONTROL_TYPE_GET_CAMERA_SOFTWARE_INFO_RSP = 0x1054,			

	ICE_CONTROL_TYPE_SDCARD_FORMAT_ONLY              = 0x1055,           	
	ICE_CONTROL_TYPE_SDCARD_FORMAT_ONLY_RSP          = 0x1056,           

	ICE_CONTROL_TYPE_GET_OFFLINE_STATE_INFO	= 0x1057,			
	ICE_CONTROL_TYPE_GET_OFFLINE_STATE_INFO_RSP	= 0x1058,		

	ICE_CONTROL_TYPE_GET_CAMERA_INFO_JSON	= 0x1059,			
	ICE_CONTROL_TYPE_GET_CAMERA_INFO_JSON_RSP	= 0x105a,		

	ICE_CONTROL_TYPE_TALK_REFUSE = 0x105b,							
	ICE_CONTROL_TYPE_TALK_REFUSE_RSP = 0x105c,						

	ICE_CONTROL_TYPE_TALK_IGNORE = 0x105d,       
	ICE_CONTROL_TYPE_TALK_IGNORE_RSP = 0x105e,      

	ICE_CONTROL_TYPE_END						= 0x105F,		
} ICE_CONTROL_TYPE_E;



typedef union 
{
	ICE_U8 au8Buffer[ICE_BUF_SIZE_CONTROL];
} ICE_CONTROL_DATA_INTERNAL_U;

//! \ingroup group_communication

typedef struct 
{
	ICE_OPER_DATA_S stHead;						
	ICE_CONTROL_DATA_INTERNAL_U unData;			
} ICE_CONTROL_DATA_S;


typedef struct
{
	ICE_U32 u32FlashSize;
	ICE_U32 u32AlpuIcType;
	ICE_U32 reserved[14];

} ICE_CAMERA_HW_INFO_S;


///////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////


//! \ingroup group_communication

typedef enum
{
	ICE_EVENT_TYPE_BASE			= 0x2000,		
	ICE_EVENT_TYPE_DTCA_EVENT	= 0x2001,		
	ICE_EVENT_TYPE_VLPR_EVENT	= 0x2002,		
    ICE_EVENT_TYPE_SFDV_EVENT	= 0x2004,		
	ICE_EVENT_TYPE_VLPREXT_EVENT	= 0x2005,	
	ICE_EVENT_TYPE_HCNT_EVENT	= 0x2006,		
	ICE_EVENT_TYPE_IPG_EVENT	= 0x2007,		
	ICE_EVENT_TYPE_NET_STAT_EVENT = 0x20fc, 
	ICE_EVENT_TYPE_IO_EVENT     = 0x20fe,		
	ICE_EVENT_TYPE_RS232_EVENT	= 0x20ff,		
	ICE_EVENT_TYPE_RS485_EVENT	= 0x2100,		
	ICE_EVENT_TYPE_IO_EVENT_EXPIRED     = 0x2101,		
	TYPE_TALK_STATE				= 0x2102,
	ICE_EVENT_TYPE_END			= 0x2103,		
} ICE_EVENT_TYPE_E;





typedef union 
{
	ICE_U8 au8Buffer[ICE_BUF_SIZE_EVENT];			
} ICE_EVENT_DATA_INTERNAL_U;

//! \ingroup group_communication

typedef struct 
{
	ICE_OPER_DATA_S stHead;							
	ICE_EVENT_DATA_INTERNAL_U unData;				
} ICE_EVENT_DATA_S;


///////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////


//! \ingroup group_communication

typedef enum
{
	ICE_VPRO_TYPE_BASE 				= 0x3000,		
	ICE_VPRO_TYPE_DTCA_TARGET_SET	= 0x3001,		
	ICE_VPRO_TYPE_VLPR_TARGET_SET	= 0x3002,		
	ICE_VPRO_TYPE_SFDV_TARGET_SET	= 0x3004,		
	ICE_VPRO_TYPE_SNAP				= 0x3100,		
	ICE_VPRO_TYPE_END				= 0x3101,		
} ICE_VPRO_TYPE_E;



typedef union 
{
	ICE_U8 au8Buffer[ICE_BUF_SIZE_VPRO];			
} ICE_VPRO_DATA_INTERNAL_U;

//! \ingroup group_communication

typedef struct 
{
	ICE_OPER_DATA_S stHead;							
	ICE_VPRO_DATA_INTERNAL_U unData;				
} ICE_VPRO_DATA_S;


///////////////////////////////////////////////////////////////////////////////////////////////////


//! \ingroup group_communication

typedef enum
{
	ICE_ALGO_CONFIG_TYPE_BASE 						= 0x4000,		
	ICE_ALGO_CONFIG_TYPE_SET_AGLO_MODULE			= 0x4001,		
	ICE_ALGO_CONFIG_TYPE_SET_AGLO_MODULE_RSP		= 0x4002,		
	ICE_ALGO_CONFIG_TYPE_GET_AGLO_MODULE			= 0x4003,		
	ICE_ALGO_CONFIG_TYPE_GET_AGLO_MODULE_RSP		= 0x4004,		

	ICE_ALGO_CONFIG_TYPE_SET_VIDEO_SOURCE_MODE		= 0x4100,		
	ICE_ALGO_CONFIG_TYPE_SET_VIDEO_SOURCE_MODE_RSP	= 0x4101,		
	
	ICE_ALGO_CONFIG_TYPE_GET_VIDEO_SOURCE_MODE		= 0x4102,		
	ICE_ALGO_CONFIG_TYPE_GET_VIDEO_SOURCE_MODE_RSP	= 0x4103,		
	

	ICE_ALGO_CONFIG_TYPE_SET_DTCA_ALGO_LIB_INFO		= 0x4200,		
	ICE_ALGO_CONFIG_TYPE_SET_DTCA_ALGO_LIB_INFO_RSP	= 0x4201,		
	ICE_ALGO_CONFIG_TYPE_GET_DTCA_ALGO_LIB_INFO		= 0x4202,		
	ICE_ALGO_CONFIG_TYPE_GET_DTCA_ALGO_LIB_INFO_RSP	= 0x4203,		
	
	ICE_ALGO_CONFIG_TYPE_SET_VLPR_ALGO_LIB_INFO		= 0x4204,		
	ICE_ALGO_CONFIG_TYPE_SET_VLPR_ALGO_LIB_INFO_RSP	= 0x4205,		
	ICE_ALGO_CONFIG_TYPE_GET_VLPR_ALGO_LIB_INFO		= 0x4206,		
	ICE_ALGO_CONFIG_TYPE_GET_VLPR_ALGO_LIB_INFO_RSP	= 0x4207,		
	
	ICE_ALGO_CONFIG_TYPE_SET_SFDV_ALGO_LIB_INFO		= 0x4208,		
	ICE_ALGO_CONFIG_TYPE_SET_SFDV_ALGO_LIB_INFO_RSP	= 0x4209,		
	ICE_ALGO_CONFIG_TYPE_GET_SFDV_ALGO_LIB_INFO		= 0x4210,		
	ICE_ALGO_CONFIG_TYPE_GET_SFDV_ALGO_LIB_INFO_RSP	= 0x4211,		
	
	ICE_ALGO_CONFIG_TYPE_SET_ITSE_ALGO_LIB_INFO		= 0x4212,		
	ICE_ALGO_CONFIG_TYPE_SET_ITSE_ALGO_LIB_INFO_RSP	= 0x4213,		
	ICE_ALGO_CONFIG_TYPE_GET_ITSE_ALGO_LIB_INFO		= 0x4214,		
	ICE_ALGO_CONFIG_TYPE_GET_ITSE_ALGO_LIB_INFO_RSP	= 0x4215,		

	ICE_ALGO_CONFIG_TYPE_SET_DTCA_RULE_PARAM		= 0x4300,		
	ICE_ALGO_CONFIG_TYPE_SET_DTCA_RULE_PARAM_RSP	= 0x4301,		
	ICE_ALGO_CONFIG_TYPE_GET_DTCA_RULE_PARAM		= 0x4302, 		
	ICE_ALGO_CONFIG_TYPE_GET_DTCA_RULE_PARAM_RSP	= 0x4303, 		
	
	ICE_ALGO_CONFIG_TYPE_SET_VLPR_RULE_PARAM		= 0x4304,		
	ICE_ALGO_CONFIG_TYPE_SET_VLPR_RULE_PARAM_RSP	= 0x4305,		
	ICE_ALGO_CONFIG_TYPE_GET_VLPR_RULE_PARAM		= 0x4305,		
	ICE_ALGO_CONFIG_TYPE_GET_VLPR_RULE_PARAM_RSP	= 0x4306,		
	
	ICE_ALGO_CONFIG_TYPE_SET_SFDV_RULE_PARAM		= 0x4307,		
	ICE_ALGO_CONFIG_TYPE_SET_SFDV_RULE_PARAM_RSP	= 0x4308,		
	ICE_ALGO_CONFIG_TYPE_GET_SFDV_RULE_PARAM		= 0x4309, 		
	ICE_ALGO_CONFIG_TYPE_GET_SFDV_RULE_PARAM_RSP	= 0x4310, 		
	
	ICE_ALGO_CONFIG_TYPE_SET_HCNT_RULE_PARAM		= 0x4311,		
	ICE_ALGO_CONFIG_TYPE_SET_HCNT_RULE_PARAM_RSP	= 0x4312,		
	ICE_ALGO_CONFIG_TYPE_GET_HCNT_RULE_PARAM		= 0x4313, 		
	ICE_ALGO_CONFIG_TYPE_GET_HCNT_RULE_PARAM_RSP	= 0x4314, 		
	
	ICE_ALGO_CONFIG_TYPE_END						= 0x4315,		
} ICE_ALGO_CONFIG_TYPE_E;

///////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct __NET_ONVIF_CONFIG{
	ICE_U32 version;  
	ICE_U32 enable; 
	ICE_U8 aucReserved[128];
}NET_ONVIF_CONFIG;

typedef struct
{
	ICE_U32 u32Expline;			
	ICE_S32 s32AGain;			
	ICE_S32 s32DGain;			

	ICE_U32 u32Mode;			

	ICE_U32 u32DayBegin;		
	ICE_U32 u32DayEnd;			
	ICE_U32 u32DayExplineMin;	
	ICE_U32 u32DayExplineMax;	
	ICE_S32 s32DayAGainMin;		
	ICE_S32 s32DayAGainMax;		
	ICE_S32 s32DayDGainMin;		
	ICE_S32 s32DayDGainMax;		

	ICE_U32 u32NightBegin;		
	ICE_U32 u32NightEnd;		
	ICE_U32 u32NightExplineMin;	
	ICE_U32 u32NightExplineMax;	
	ICE_S32 s32NightAGainMin;	
	ICE_S32 s32NightAGainMax;	
	ICE_S32 s32NightDGainMin;	
	ICE_S32 s32NightDGainMax;	

	ICE_U32 u32OtherExplineMin;	
	ICE_U32 u32Focus;			
	ICE_S32 s32Height;			
	ICE_S32 s32HeightAlgo;		
	ICE_S32 s32Distance;		
	ICE_S32 s32DistAlgo;		

	ICE_U32 u32LightMode;		
	ICE_U32 u32ColorMode;		

	ICE_U32 u32AlgoWidth;
	ICE_U32 u32AlgoHeight;

} ICE_ExpAttr_S;


typedef enum
{
	ICE_LIGHT_MODE_AUTO = 0,		
	ICE_LIGHT_MODE_BY_TIME,			
	ICE_LIGHT_MODE_BY_TMLS,			
} ICE_LIGHT_MODE_TYPE_E;

typedef enum
{
	ICE_COLOR_MODE_AUTO = 0,		
	ICE_COLOR_MODE_COLOR,			
	ICE_COLOR_MODE_NOCOLOR,			
	
} ICE_COLOR_MODE_TYPE_E;


typedef enum
{
	ICE_RS485_PROTOCOL_HN = 1,		
	ICE_RS485_PROTOCOL_HL,			
	ICE_RS485_PROTOCOL_BA,			
	ICE_RS485_PROTOCOL_ICE,		
	ICE_RS485_PROTOCOL_AJS,     
	
} ICE_RS485_PROTOCOL_TYPE_E;

typedef enum
{
	ICE_HCNT_DOOR_FRONT = 0,		
	ICE_HCNT_DOOR_MID,				
	ICE_HCNT_DOOR_BACK				
	
} ICE_HCNT_DOOR_TYPE_E;

typedef enum
{
	ICE_HCNT_LINK_SERVER_NET = 0,		
	ICE_HCNT_LINK_SERVER_RS485,			
	
} ICE_HCNT_IPC_LINK_SERVER_MODE_E;

typedef enum
{
	ICE_HCNT_CLEAR_PERIOD = 0,		
	ICE_HCNT_CLEAR_TRIGGER,			
	
} ICE_HCNT_CLEAR_MODE_E;

typedef enum
{
	ICE_HCNT_TRIGGER_RELAYIN = 0,		
	ICE_HCNT_TRIGGER_RS485,				
	ICE_HCNT_TRIGGER_PROGRAM,			
	
} ICE_HCNT_TRIGGER_MODE_E;

typedef enum
{
	ICE_HCNT_RELAYIN_OFF = 0,		
	ICE_HCNT_RELAYIN_ON,			
	
} ICE_HCNT_RELAYIN_MODE_E;

typedef enum
{
	ICE_HCNT_STORE_FLASH = 0,		
	ICE_HCNT_STORE_SDCARD,			

} ICE_HCNT_STORE_MODE;

typedef enum
{
	ICE_HCNT_COLLECT_HOUR = 0,		
	ICE_HCNT_COLLECT_DAY,			

} ICE_HCNT_COLLECT_MODE;

#define MAX_HCNT_TEXT 64
typedef struct
{
	ICE_S32 s32RS485Type;
	ICE_U32 u32DoorType;
	ICE_U32 u32Railway;
	
	ICE_S8 as8ServerIP[16];
	ICE_S8 as8Username[MAX_HCNT_TEXT];
	ICE_S8 as8Password[MAX_HCNT_TEXT];
	ICE_S8 as8CameraID[MAX_HCNT_TEXT];
	ICE_U32 u32HBInterval;			
	
	ICE_U32 u32ClearMode;			
	ICE_U32 u32ClearInterval;		
	ICE_U32 u32TriggerMode;			
	ICE_U32 u32RelayinMode;			
	
	ICE_U32 u32DataStore;			
	ICE_U32 u32StoreMode;			
	ICE_U32 u32StoreSize;			
	ICE_U32 u32StoreStat;			
	ICE_U32 u32StatCollect;			
	ICE_U32 u32CollectMode;			
	
	ICE_U32 au32Reserved[32];

} ICE_HCNTAttr_S;


typedef enum
{
	ICE_OSD_LOCATION_LEFT_TOP = 0,	
	ICE_OSD_LOCATION_RIGHT_TOP,		
	ICE_OSD_LOCATION_LEFT_BOTTOM,	
	ICE_OSD_LOCATION_RIGHT_BOTTOM,	
	ICE_OSD_LOCATION_TOP_MID,		
	ICE_OSD_LOCATION_BOTTOM_MID,		
} ICE_OSD_LOCATION_TYPE_E;


typedef enum
{
	ICE_OSD_LOCATION_IN_IMAGE = 0,
	ICE_OSD_LOCATION_OUT_TOP,	   
	ICE_OSD_LOCATION_OUT_BOTTOM,   
} ICE_OSD_BIG_LOCATION_TYPE_E;



typedef enum
{
	ICE_CAMERA_DIRECTION_NORTH = 0,	
	ICE_CAMERA_DIRECTION_WEST,		
	ICE_CAMERA_DIRECTION_EAST,		
	ICE_CAMERA_DIRECTION_SOUTH		
	
} ICE_CAMERA_DIRECTION_TYPE_E;


typedef enum
{
	ICE_OSD_FONTSIZE_SMALL= 0,	
	ICE_OSD_FONTSIZE_MEDIUM,		
	ICE_OSD_FONTSIZE_LARGE,		
} ICE_OSD_FONTSIZE_TYPE_E;


#define MAX_OSD_TEXT 64
#define MAX_CUSTOM_OSD_LINE_NUM 6

#define MAX_OSD_TEXT_SFM 32
#define MAX_CUSTOM_OSD_LINE_NUM_SFM 4


typedef struct
{
	//video
	ICE_U32 u32OSDLocationVideo;		
	ICE_U32 u32ColorVideo;				

	ICE_U32 u32DateVideo;				
	ICE_U32 u32License;					

	ICE_U32 u32CustomVideo;				
	char szCustomVideo[MAX_OSD_TEXT];	

	//jpeg
	ICE_U32 u32OSDLocationJpeg;			
	ICE_U32 u32ColorJpeg;				

	ICE_U32 u32DateJpeg;				
	ICE_U32 u32Algo;					

	ICE_U32 u32DeviceID;				
	char szDeviceID[MAX_OSD_TEXT];		

	ICE_U32 u32DeviceName;				
	char szDeviceName[MAX_OSD_TEXT];	

	ICE_U32 u32CamreaLocation;			
	char szCamreaLocation[MAX_OSD_TEXT];	

	ICE_U32 u32SubLocation;				
	char szSubLocation[MAX_OSD_TEXT];	

	ICE_U32 u32ShowDirection;			
	ICE_U32 u32CameraDirection;			

	ICE_U32 u32CustomJpeg;				

	ICE_U32 u32ItemDisplayMode;             
	ICE_U32 u32DateMode;                 
	ICE_U32 u32BgColor;                  
	ICE_U32 u32FontSize;				
	ICE_U32 u32ExpandMode;				
	char szCustomJpeg[MAX_OSD_TEXT - 20];	
	
	char szCustomVideo6[MAX_CUSTOM_OSD_LINE_NUM * MAX_OSD_TEXT];	
	char szCustomJpeg6[MAX_CUSTOM_OSD_LINE_NUM * MAX_OSD_TEXT];	

} ICE_OSDAttr_S;


#define ICE_SCHED_TASK_MASK_ARM		0x00000003
#define ICE_SCHED_TASK_MASK_RELAY	0x0000000C
#define ICE_SCHED_TASK_MASK_COLOR	0x00000030

typedef enum
{
	ICE_SCHED_TASK_TYPE_ARM			= 0x00000001, 	
	ICE_SCHED_TASK_TYPE_DISARM		= 0x00000002, 	
	ICE_SCHED_TASK_TYPE_RELAY_ON	= 0x00000004, 	
	ICE_SCHED_TASK_TYPE_RELAY_OFF	= 0x00000008, 	
	ICE_SCHED_TASK_TYPE_GRAY		= 0x00000010,	
	ICE_SCHED_TASK_TYPE_COLOR		= 0x00000020, 	
	
} ICE_SCHED_TASK_TYPE_E;

typedef struct
{
	ICE_U32 u32Time;		
	ICE_U32 u32Type;		
	ICE_U32 u32TimeEnd;		
	ICE_U32 u32Reserved[7];	
	
} ICE_SCHED_TASK_S;

typedef struct
{
	ICE_U8 u8UseSnapCamera;
	ICE_U32 u32IP;
	ICE_U32 u32Delay;
	ICE_U32 u32SnapCount;
	ICE_U32 u32SnapInterval;
	ICE_U32 u32Reserved[8];
	
} ICE_SNAP_CAMERA_S;

typedef enum
{
	ICE_PHYCHN_MODE_SUB_VENC = 0,		
	ICE_PHYCHN_MODE_VO,					
	
} ICE_PHYCHN_MODE_TYPE_E;


typedef struct
{
	ICE_U32 u32PhyChn;
	ICE_U32 u32RCMain;
	ICE_U32 u32RCSub;
	ICE_U32 u32CloseupEn; 
	ICE_U32 u32Qfactor;
	ICE_U32 u32FullEn;
	ICE_U32 u32CloseupInFullEn;
	ICE_U16 u16Width;
	ICE_U16 u16Height;
	ICE_U32 u32PlateSize;	
	ICE_U32 u32Reserved[2];
	
} ICE_PHYCHN_CFG_S;


typedef struct
{
	ICE_U32 u32VFDRelayout;			
	ICE_U32 u32DTCARelayout;		
	
	ICE_U32 u32Expline;			
	ICE_S32 s32AGain;			
	ICE_S32 s32DGain;			
	ICE_U32 u32Mode;			
	ICE_U32 u32ExplineMin;		
	ICE_U32 u32ExplineMax;		
	ICE_S32 s32AGainMin;		
	ICE_S32 s32AGainMax;		
	ICE_S32 s32DGainMin;		
	ICE_S32 s32DGainMax;		
	
	ICE_U32 u32Reserved[1024];		
	
} ICE_VFD_PARAM_S;


//
typedef struct
{
	int expARegulateEn;
	int dayOrNightJudgeCnt; 
	int lumLimitForDay; 
	int lumLimitForNight; 
	int maxValidBright;
	int minValidBright; 
	int maxValidForEnvBright;
	int minValidForEnvBright; 
	int maxExpCompensation; 
	int minExpCompensation;
	int initExpCompensation;
	int expReguateInterval;
	
	int antiflickerEn;  
	int antiflickerFrequency; 
	int antiflickerMode;
	int s32PowerFrequencyCompensation; 

	int u32HighLightMode;    
	int maxExpCompensationHL;
	int minExpCompensationHL;
	int initExpCompensationHL;

	int as32Reserved[5]; 
}ICE_EXP_AREGULATE_PARAM;

//


//HTTP post


typedef struct
{
	int httpPostEn; 
	int directionFalg; 
	int parkID; 
	char ipStr[20]; 
	int port; 
	char domainName[44]; 
	char ipStr_bak[20]; 
	char path[64]; 
	int maxSendCnt;
	int mode; 
	int autoAlarmoutEn; 
	int autoAlarmoutMode;
	int snap_full;//  
	int snap_closeup;//  
	int enable_baksvr; //
	short offlinePostEn;   //
	short interval;  // 5~30s  
	int ssl_enable;

	char ioPostEn;
	char ioNum;
	char rsv1;
	char rsv2;
	int as32Reserved[1]; //

}ICE_HTTP_POST_PARAM;

typedef struct 
{
	int identify;  
	int httpPostEn; 
	int mode; 
	int sslEn;  
	int sslPort;
	int bakServerEn; 
	int serverPostMode; 
	int serverPort; 

	char serverIpStr[32]; 
	char serverDomian[64]; 
	char bakServerIpStr[32]; 
	char bakServerDomian[64]; 
	char path[64]; 
	char parkIdStr[64]; 

	int maxSendCnt; 
	int snapFull;
	int snapCloseup;
	int camIdType;   
	int directionFalg; 
	int offlinePostEn;  
	int interval;  
	int autoAlarmOutEn;  
	int autoAlarmOutMode;
	int ioInPostEn;  
	char ioInNum[4];  

	char reserve[64];   
	int extParamSize;   
}ICE_HTTP_POST_NEW_PARAM;

//
typedef struct 
{
	char userID[32]; 
	char address[64];
}ICE_HTTP_POST_MODE6_EXT_PARAM;

#define MAX_USEABLE_UART_CNT 2 

typedef enum{
	UART_PLATENUM_PROTOCOL_ONE =0,	
	UART_TRANS_TRANSMIT,	
	UART_LED_CONTROL,	
	UART_MIX_MODE,		
	UART_PLATENUM_PROTOCOL_TWO,   
	UART_PLATENUM_PROTOCOL_THR,   
	UART_PLATENUM_PROTOCOL_FOUR,	 
	UART_RS232_GETPHONEMAC     
}ICE_UART_WORK_MODE_E;


typedef struct {
	int force_offline_enable;
	int reserved[15];
}Force_camera_offline_cfg_param;

typedef enum
{
	LED_CARD_SERIAL_PROTOL1 = 0x00,		
	LED_CARD_SERIAL_PROTOL2 = 0x01,		
	LED_CARD_SERIAL_MAX_VALUE
}LED_CARD_SERIAL_TYPE_PROTOL;

typedef struct
{
	int uartEn;					 
	int uartWorkMode;			 
	int baudRate;				 
	int dataBits;				
	int parity;					
	int stopBits;				
	int flowControl;			 
	int LEDControlCardType;		 
	int LEDBusinessType;		 
	int u32UartProcOneReSendCnt; 
	char screen_mode;            
	char as32Reserved[7]; 
}ice_uart;


typedef struct{
	ice_uart uart_param[MAX_USEABLE_UART_CNT];
	int as32Reserved[10]; 
}ICE_UART_PARAM;



typedef enum{
	SDS_NO =1,	
	SDS_ERROR,	
	SDS_ENOUGH,	
	SDS_FULL,		
	SDS_UNFORMATTED   
}DISK_STATUS;

typedef enum{
	STORE_NO_CLIENT_CONNET =0,	
	STORE_ALWAYS,	
	STORE_NEVER	//SD card not store
}DISK_STORE_MODE;

typedef struct
{
	int status; 
	int totalSize; 
	int usedSize;
	int availableSize; 
	int SDStoreMode;
	int SDFormatFlag; 
	int SDUnloadFlag;
	int SDUmountFlag;
	int u32Reserved[6];
}SD_card_param;

#define	MAX_DISK_NAME_LEN		128	
#define MAX_DISK_MOUNT_PATH_LEN	128	
#define DISK_DEV_NODE_LEN			12	// EX: /dev/sda	


typedef struct
{
	int SDTotalNum;
	SD_card_param SDCard_param;
	char	MountPoint[MAX_DISK_MOUNT_PATH_LEN];	
	char	DevNode[DISK_DEV_NODE_LEN];	// EX: /dev/mmcblk0
}SD_CARD;

typedef struct
{
	int EnUserExtPartModel;
	int UserExtPartSize;
	char UserExtPartMountPath[MAX_DISK_MOUNT_PATH_LEN];
	int u32Reserved[32];
}SD_CARD_USER_EXT_CFG;

typedef struct
{
	char	id[64];

} Dev_ID;



typedef struct
{
	int mode;  
	int match;  
	int black_mode; 
	int black_match; 
	int temp_mode;  
	int ignoreHZ_flag;
	int allow_unmatch_chars_cnt;
	int new_version; //  new or old WhiteList flag, new:1, old:other.
	int Jing_mode;  
	int Army_mode;  
	int Antifake_mode;  
	int NewEnergy_mode; 

	int EmergencyMode; 
	char reserved[80]; 
} WhiteList_Param;



typedef struct
{
	int alarm_in_delay;
	int alarm_in_stable_frame;   
	int alarm_in_check_interval; 
	int max_again_process_cnt;  
	int u32Reserved[10];  
} HDTrigger_Param;

#define WHITELIST_VALID_TIME_LEN 10
typedef struct{
	char plate_number[16];
	char valid_sdate[WHITELIST_VALID_TIME_LEN+1];
	char valid_edate[WHITELIST_VALID_TIME_LEN+1];	
	char valid_stime[WHITELIST_VALID_TIME_LEN+1];
	char valid_etime[WHITELIST_VALID_TIME_LEN+1];	
	char type[WHITELIST_VALID_TIME_LEN+1];	
	char reserved[64];	
}WHITELIST_ITEM;

typedef struct{
	char plate_number[128];
	char valid_sdate[WHITELIST_VALID_TIME_LEN+1];
	char valid_edate[WHITELIST_VALID_TIME_LEN+1];	
	char valid_stime[WHITELIST_VALID_TIME_LEN+1];
	char valid_etime[WHITELIST_VALID_TIME_LEN+1];	
	char type[WHITELIST_VALID_TIME_LEN+1];	
	char remark[128];
	char reserved[256];
}WHITELIST_ITEM_NEW;

typedef struct
{
	ICE_U32 u32Enable;		
	ICE_U32 u32Time;		
	ICE_U32 u32Reserved[16];
	
} AutoRebootParam;

typedef struct
{
	char passwd[16];
	ICE_U32 u32Enable;
	ICE_U32 u32Reserved[64];
	
} EncryptParam;


typedef struct
{
	ICE_U32 rs485_1;	
	ICE_U32 rs485_2;	
	ICE_U32 u32Reserved[16];
}SFM_RS485TransTypeParam;

typedef struct
{
	char old_passwd[16];
	char new_passwd[16];
	ICE_U32 u32Reserved[64];
	
} PasswdParam;

typedef struct
{
	ICE_U32 u32DNS;		
	ICE_U32 u32DNS2;	
	ICE_U32 u32Reserved[6];
	
} DNSParam;

typedef struct
{
	ICE_U32 u32Luminance;		
	ICE_U32 u32AlwaysOn;		
	ICE_U32 u32Reserved[6];
	
} LightParam;

typedef struct
{
	ICE_U8 u8Endivisor;
	ICE_U8 u8Lightlevel;
	ICE_U8 u8Shh;
	ICE_U8 u8Smm;
	ICE_U8 u8Ehh;
	ICE_U8 u8Emm;
	ICE_U8 u8Reserved[62];
}IntervalCtlLightDivisor;

typedef struct T_DivLightCtrl
{
	IntervalCtlLightDivisor tLightDiv[3];
	ICE_U8 aucReserved[256];
}T_DivLightCtrl;

typedef struct
{
	ICE_U32 u32Enable;			
	ICE_U32 u32Interval;		
	ICE_U32 u32Reserved[16];
	
} ReOpenParam;

typedef struct
{
	ICE_U8 io_in_0;
	ICE_U8 io_in_1;
	ICE_U8 io_in_2;
	ICE_U8 io_in_3;
}IoInState;

typedef struct
{
	ICE_U8 isOpen;
}TimerReboot;

typedef struct
{
	ICE_U32 u32IP;		//FTP server ip
	char szUserName[64];		//user name
	char szPasswd[64];		//passwd
	ICE_U32 u32HeartBeatInt;		//heart inverval
	ICE_U32 u32Enable;  //FTP upload open or close
	ICE_U32 u32Plate; // 
	ICE_U32 u32XML; //
	char s8Path[100]; //
	ICE_U32 u32Reserved[2];
	
}FTPParam;

typedef struct
{
	int enable;	//
	char ledip[16];//led的ip
	int ledport;//
	int as32Reserved[4]; //

} ICE_LED_PARAM;


typedef struct
{
	ICE_U16 u16EnStrobeCtl;			
	ICE_U16 u16TriggerDelay;			
	ICE_U16 u16StrobeLastTime;		
	ICE_U16 u16StrobeMode;				
	ICE_U16 u16StrobeCtlMode;			
	ICE_U32 reserved[7];				
}strobe_light_param_st;


typedef struct _IPC_AF_ZOOM
{
	ICE_U8	num;		
	ICE_U8	direction;	
	ICE_U8  speed;		
	ICE_U16 step;		
	ICE_U8	reserved[18];
}ICE_IPC_AF_ZOOM;


#define ISP_CFG_FILE "ISP_param.cfg"
#define UART_CFG_FILE "uart_param.cfg"
#define SD_CFG_FILE "SD_param.cfg"
#define WHITELIST_CFG_FILE "whitelist_param.cfg"
#define WHITELIST_FILE "whitelist.txt"
#define USER_DATA_FILE "user_data.cfg"
#define HDTRIGGER_CFG_FILE "alarm_in_stable.txt"
#define UAER_PASSWD_FILE "user_passwd.cfg"
#define FILE_LIGHT_FILE "fill_light.cfg"
#define LED_CFG_FILE "Led_Param.cfg"
#define STROBE_LIGHT_CFG "strobe_light.cfg"




//! \ingroup group_communication

typedef enum
{
	ICE_CAMERA_CONFIG_TYPE_BASE 					= 0x5000,		

	ICE_CAMERA_CONFIG_TYPE_SET_BASE_PARAM			= 0x5001,		
	ICE_CAMERA_CONFIG_TYPE_SET_BASE_PARAM_RSP		= 0x5002,		
	ICE_CAMERA_CONFIG_TYPE_GET_BASE_PARAM			= 0x5003,		
	ICE_CAMERA_CONFIG_TYPE_GET_BASE_PARAM_RSP		= 0x5004,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_SYSTEM_TIME			= 0x5005,		
	ICE_CAMERA_CONFIG_TYPE_SET_SYSTEM_TIME_RSP		= 0x5006,		
	ICE_CAMERA_CONFIG_TYPE_GET_SYSTEM_TIME			= 0x5007,		
	ICE_CAMERA_CONFIG_TYPE_GET_SYSTEM_TIME_RSP		= 0x5008,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_ISP_PARAM			= 0x5009,		
	ICE_CAMERA_CONFIG_TYPE_SET_ISP_PARAM_RSP		= 0x5010,		
	ICE_CAMERA_CONFIG_TYPE_GET_ISP_PARAM			= 0x5011,		
	ICE_CAMERA_CONFIG_TYPE_GET_ISP_PARAM_RSP		= 0x5012,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_VENC_PARAM			= 0x5013,		
	ICE_CAMERA_CONFIG_TYPE_SET_VENC_PARAM_RSP		= 0x5014,		
	ICE_CAMERA_CONFIG_TYPE_GET_VENC_PARAM			= 0x5015,	
	ICE_CAMERA_CONFIG_TYPE_GET_VENC_PARAM_RSP		= 0x5016,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_IO_PARAM				= 0x5017,		
	ICE_CAMERA_CONFIG_TYPE_SET_IO_PARAM_RSP			= 0x5018,		
	ICE_CAMERA_CONFIG_TYPE_GET_IO_PARAM				= 0x5019,		
	ICE_CAMERA_CONFIG_TYPE_GET_IO_PARAM_RSP			= 0x5020,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_COM_PARAM			= 0x5021,		
	ICE_CAMERA_CONFIG_TYPE_SET_COM_PARAM_RSP		= 0x5022,		
	ICE_CAMERA_CONFIG_TYPE_GET_COM_PARAM			= 0x5023,		
	ICE_CAMERA_CONFIG_TYPE_GET_COM_PARAM_RSP		= 0x5024,		
	
	ICE_CAMERA_CONFIG_TYPE_UPDATE_PROGRAM			= 0x5025,		
	ICE_CAMERA_CONFIG_TYPE_UPDATE_PROGRAM_RSP		= 0x5026,		
	
	ICE_CAMERA_CONFIG_TYPE_DEFAULT_PROGRAM			= 0x5027,		
	ICE_CAMERA_CONFIG_TYPE_DEFAULT_PROGRAM_RSP		= 0x5028,		
	
	ICE_CAMERA_CONFIG_TYPE_DEFAULT_PARAM			= 0x5029,		
	ICE_CAMERA_CONFIG_TYPE_DEFAULT_PARAM_RSP		= 0x5030,		
	
	ICE_CAMERA_CONFIG_TYPE_DEFAULT_PARAM_EXP_IP		= 0x5031,		
	ICE_CAMERA_CONFIG_TYPE_DEFAULT_PARAM_EXP_IP_RSP	= 0x5032,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_FTP_PARAM			= 0x5033,		
	ICE_CAMERA_CONFIG_TYPE_SET_FTP_PARAM_RSP		= 0x5034,		
	ICE_CAMERA_CONFIG_TYPE_GET_FTP_PARAM			= 0x5035,		
	ICE_CAMERA_CONFIG_TYPE_GET_FTP_PARAM_RSP		= 0x5036,	
	
	ICE_CAMERA_CONFIG_TYPE_SET_SNAP_PARAM			= 0x5037,		
	ICE_CAMERA_CONFIG_TYPE_SET_SNAP_PARAM_RSP		= 0x5038,		
	ICE_CAMERA_CONFIG_TYPE_GET_SNAP_PARAM			= 0x5039,		
	ICE_CAMERA_CONFIG_TYPE_GET_SNAP_PARAM_RSP		= 0x5040,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_HCNT_PARAM			= 0x5041,		
	ICE_CAMERA_CONFIG_TYPE_SET_HCNT_PARAM_RSP		= 0x5042,		
	ICE_CAMERA_CONFIG_TYPE_GET_HCNT_PARAM			= 0x5043,		
	ICE_CAMERA_CONFIG_TYPE_GET_HCNT_PARAM_RSP		= 0x5044,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_ALARM_IN_CFG			= 0x5045,		
	ICE_CAMERA_CONFIG_TYPE_SET_ALARM_IN_CFG_RSP		= 0x5046,		
	ICE_CAMERA_CONFIG_TYPE_GET_ALARM_IN_CFG			= 0x5047,		
	ICE_CAMERA_CONFIG_TYPE_GET_ALARM_IN_CFG_RSP		= 0x5048,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_TMSYNC_CFG				= 0x5049,		
	ICE_CAMERA_CONFIG_TYPE_SET_TMSYNC_CFG_RSP			= 0x5050,		
	ICE_CAMERA_CONFIG_TYPE_GET_TMSYNC_CFG				= 0x5051,		
	ICE_CAMERA_CONFIG_TYPE_GET_TMSYNC_CFG_RSP			= 0x5052,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_OSD_CFG				= 0x5053,		
	ICE_CAMERA_CONFIG_TYPE_SET_OSD_CFG_RSP			= 0x5054,		
	ICE_CAMERA_CONFIG_TYPE_GET_OSD_CFG				= 0x5055,		
	ICE_CAMERA_CONFIG_TYPE_GET_OSD_CFG_RSP			= 0x5056,	
	
	ICE_CAMERA_CONFIG_TYPE_SET_SCHED_TASK_CFG		= 0x5061,		
	ICE_CAMERA_CONFIG_TYPE_SET_SCHED_TASK_CFG_RSP	= 0x5062,	
	ICE_CAMERA_CONFIG_TYPE_GET_SCHED_TASK_CFG		= 0x5063,		
	ICE_CAMERA_CONFIG_TYPE_GET_SCHED_TASK_CFG_RSP	= 0x5064,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT		= 0x5065,		
	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT_RSP	= 0x5066,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_PHYCHN_CFG				= 0x5067,		
	ICE_CAMERA_CONFIG_TYPE_SET_PHYCHN_CFG_RSP			= 0x5068,		
	ICE_CAMERA_CONFIG_TYPE_GET_PHYCHN_CFG				= 0x5069,		
	ICE_CAMERA_CONFIG_TYPE_GET_PHYCHN_CFG_RSP			= 0x5070,		

	
	ICE_CAMERA_CONFIG_TYPE_CHECK_VFD_COMM			= 0x5071,		
	ICE_CAMERA_CONFIG_TYPE_CHECK_VFD_COMM_RSP		= 0x5072,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_VFD_PARAM		= 0x5073,		
	ICE_CAMERA_CONFIG_TYPE_SET_VFD_PARAM_RSP	= 0x5074,		
	ICE_CAMERA_CONFIG_TYPE_GET_VFD_PARAM		= 0x5075,		
	ICE_CAMERA_CONFIG_TYPE_GET_VFD_PARAM_RSP	= 0x5076,		

	ICE_CAMERA_CONFIG_TYPE_SET_UART_PARAM		= 0x5077,		
	ICE_CAMERA_CONFIG_TYPE_SET_UART_PARAM_RSP	= 0x5078,		
	ICE_CAMERA_CONFIG_TYPE_GET_UART_PARAM		= 0x5079,		
	ICE_CAMERA_CONFIG_TYPE_GET_UART_PARAM_RSP	= 0x5080,		

	ICE_CAMERA_CONFIG_TYPE_SET_HTTP_POST_PARAM		= 0x5081,		
	ICE_CAMERA_CONFIG_TYPE_SET_HTTP_POST_PARAM_RSP	= 0x5082,		
	ICE_CAMERA_CONFIG_TYPE_GET_HTTP_POST_PARAM		= 0x5083,		
	ICE_CAMERA_CONFIG_TYPE_GET_HTTP_POST_PARAM_RSP	= 0x5084,		

	ICE_CAMERA_CONFIG_TYPE_SET_EXP_AREGULATE_PARAM		= 0x5085,		
	ICE_CAMERA_CONFIG_TYPE_SET_EXP_AREGULATE_PARAM_RSP	= 0x5086,		
	ICE_CAMERA_CONFIG_TYPE_GET_EXP_AREGULATE_PARAM		= 0x5087,		
	ICE_CAMERA_CONFIG_TYPE_GET_EXP_AREGULATE_PARAM_RSP	= 0x5088,	


	ICE_CAMERA_CONFIG_TYPE_SET_SDCARD_PARAM		= 0x5089,		
	ICE_CAMERA_CONFIG_TYPE_SET_SDCARD_PARAM_RSP	= 0x5090,		
	ICE_CAMERA_CONFIG_TYPE_GET_SDCARD_PARAM		= 0x5091,		
	ICE_CAMERA_CONFIG_TYPE_GET_SDCARD_PARAM_RSP	= 0x5092,		

	ICE_CAMERA_CONFIG_TYPE_GET_DEV_ID		= 0x5093,		
	ICE_CAMERA_CONFIG_TYPE_GET_DEV_ID_RSP	= 0x5094,		

	ICE_CAMERA_CONFIG_TYPE_SET_WHITELIST_PARAM		= 0x5095,		
	ICE_CAMERA_CONFIG_TYPE_SET_WHITELIST_PARAM_RSP	= 0x5096,		
	ICE_CAMERA_CONFIG_TYPE_GET_WHITELIST_PARAM		= 0x5097,		
	ICE_CAMERA_CONFIG_TYPE_GET_WHITELIST_PARAM_RSP	= 0x5098,		

	ICE_CAMERA_CONFIG_TYPE_WRITE_USER_DATA		= 0x5099,		
	ICE_CAMERA_CONFIG_TYPE_WRITE_USER_DATA_RSP	= 0x5100,		
	ICE_CAMERA_CONFIG_TYPE_READ_USER_DATA		= 0x5101,		
	ICE_CAMERA_CONFIG_TYPE_READ_USER_DATA_RSP	= 0x5102,		

	ICE_CAMERA_CONFIG_TYPE_WRITE_WHITE_LIST		= 0x5103,		
	ICE_CAMERA_CONFIG_TYPE_WRITE_WHITE_LIST_RSP	= 0x5104,		
	ICE_CAMERA_CONFIG_TYPE_READ_WHITE_LIST		= 0x5105,		
	ICE_CAMERA_CONFIG_TYPE_READ_WHITE_LIST_RSP	= 0x5106,		
	

	ICE_CAMERA_CONFIG_TYPE_SET_HDTRIGGER_PARAM		= 0x5107,		
	ICE_CAMERA_CONFIG_TYPE_SET_HDTRIGGER_PARAM_RSP	= 0x5108,		
	ICE_CAMERA_CONFIG_TYPE_GET_HDTRIGGER_PARAM		= 0x5109,		
	ICE_CAMERA_CONFIG_TYPE_GET_HDTRIGGER_PARAM_RSP	= 0x5110,		

	ICE_CAMERA_CONFIG_TYPE_ADD_WHITE_LIST		= 0x5111,		
	ICE_CAMERA_CONFIG_TYPE_ADD_WHITE_LIST_RSP	= 0x5112,		
	ICE_CAMERA_CONFIG_TYPE_DEL_WHITE_LIST		= 0x5113,		
	ICE_CAMERA_CONFIG_TYPE_DEL_WHITE_LIST_RSP	= 0x5114,	
	ICE_CAMERA_CONFIG_TYPE_EDIT_WHITE_LIST		= 0x5115,		
	ICE_CAMERA_CONFIG_TYPE_EDIT_WHITE_LIST_RSP	= 0x5116,	
	ICE_CAMERA_CONFIG_TYPE_FIND_WHITE_LIST		= 0x5117,		
	ICE_CAMERA_CONFIG_TYPE_FIND_WHITE_LIST_RSP	= 0x5118,		
	ICE_CAMERA_CONFIG_TYPE_DELALL_WHITE_LIST		= 0x5119,		
	ICE_CAMERA_CONFIG_TYPE_DELALL_WHITE_LIST_RSP	= 0x5120,		

	ICE_CAMERA_CONFIG_TYPE_SET_AUTO_REBOOT_PARAM		= 0x5121,		
	ICE_CAMERA_CONFIG_TYPE_SET_AUTO_REBOOT_PARAM_RSP	= 0x5122,		
	ICE_CAMERA_CONFIG_TYPE_GET_AUTO_REBOOT_PARAM		= 0x5123,		
	ICE_CAMERA_CONFIG_TYPE_GET_AUTO_REBOOT_PARAM_RSP	= 0x5124,		

	ICE_CAMERA_CONFIG_TYPE_SET_PASSWD_PARAM		= 0x5125,		
	ICE_CAMERA_CONFIG_TYPE_SET_PASSWD_PARAM_RSP	= 0x5126,		
	ICE_CAMERA_CONFIG_TYPE_RM_LOG_FILE		= 0x5127,		
	ICE_CAMERA_CONFIG_TYPE_RM_LOG_FILE_RSP	= 0x5128,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_DNS_PARAM			= 0x5129,		
	ICE_CAMERA_CONFIG_TYPE_SET_DNS_PARAM_RSP		= 0x5130,		
	ICE_CAMERA_CONFIG_TYPE_GET_DNS_PARAM			= 0x5131,		
	ICE_CAMERA_CONFIG_TYPE_GET_DNS_PARAM_RSP		= 0x5132,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_LIGHT_PARAM			= 0x5133,		
	ICE_CAMERA_CONFIG_TYPE_SET_LIGHT_PARAM_RSP		= 0x5134,		
	ICE_CAMERA_CONFIG_TYPE_GET_LIGHT_PARAM			= 0x5135,		
	ICE_CAMERA_CONFIG_TYPE_GET_LIGHT_PARAM_RSP		= 0x5136,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT2		= 0x5137,		
	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT2_RSP	= 0x5138,		

	ICE_CAMERA_CONFIG_TYPE_SET_REOPEN_PARAM		= 0x5139,		
	ICE_CAMERA_CONFIG_TYPE_SET_REOPEN_PARAM_RSP	= 0x5140,		
	ICE_CAMERA_CONFIG_TYPE_GET_REOPEN_PARAM		= 0x5141,		
	ICE_CAMERA_CONFIG_TYPE_GET_REOPEN_PARAM_RSP	= 0x5142,		

	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_AO_PLAY_PARAM = 0x5143, 
	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_AO_PLAY_PARAM_RSP = 0x5144,
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_AO_PLAY_PARAM = 0x5145, 
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_AO_PLAY_PARAM_RSP = 0x5146,

	ICE_CAMERA_CONFIG_TYPE_SET_LED_PARAM		= 0x5147,		
	ICE_CAMERA_CONFIG_TYPE_SET_LED_PARAM_RSP	= 0x5148,		
	ICE_CAMERA_CONFIG_TYPE_GET_LED_PARAM		= 0x5149,		
	ICE_CAMERA_CONFIG_TYPE_GET_LED_PARAM_RSP	= 0x514A,		

	ICE_CAMERA_CONFIG_TYPE_SET_CGI_PARAM		= 0x514B,		
	ICE_CAMERA_CONFIG_TYPE_SET_CGI_PARAM_RSP	= 0x514C,	
	ICE_CAMERA_CONFIG_TYPE_GET_CGI_PARAM		= 0x514D,		
	ICE_CAMERA_CONFIG_TYPE_GET_CGI_PARAM_RSP	= 0x514E,		

	ICE_CAMERA_CONFIG_TYPE_SET_LED_PROTOCOL1    = 0x5150,       
	ICE_CAMERA_CONFIG_TYPE_SET_LED_PROTOCOL1_RSP    = 0x5151,   
	ICE_CAMERA_CONFIG_TYPE_GET_LED_PROTOCOL1    = 0x5152,      
	ICE_CAMERA_CONFIG_TYPE_GET_LED_PROTOCOL1_RSP    = 0x5153,   
	
	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_OFFLINE_PARAM		 = 0x5154,      
	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_OFFLINE_PARAM_RSP  = 0x5155,   
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_OFFLINE_PARAM		 = 0x5156,       
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_OFFLINE_PARAM_RSP  = 0x5157,   

	ICE_CAMERA_CONFIG_TYPE_SET_STROBE_LIGHT_PARAM		= 0x5158,       
	ICE_CAMERA_CONFIG_TYPE_SET_STROBE_LIGHT_PARAM_RSP   = 0x5159,   
	ICE_CAMERA_CONFIG_TYPE_GET_STROBE_LIGHT_PARAM		= 0x5160,       
	ICE_CAMERA_CONFIG_TYPE_GET_STROBE_LIGHT_PARAM_RSP   = 0x5161,   

	ICE_CAMERA_CONFIG_TYPE_SET_LED_CARD_2_SERIAL_PROTOCOL		 = 0x5162,       
	ICE_CAMERA_CONFIG_TYPE_SET_LED_CARD_2_SERIAL_PROTOCOL_RSP    = 0x5163,  
	ICE_CAMERA_CONFIG_TYPE_GET_LED_CARD_2_SERIAL_PROTOCOL		 = 0x5164,      
	ICE_CAMERA_CONFIG_TYPE_GET_LED_CARD_2_SERIAL_PROTOCOL_RSP    = 0x5165,   

	ICE_CAMERA_CONFIG_TYPE_SERIAL_LED_CARD_COMMON_TIME_CFG_PARAM	= 0x5166,	
	ICE_CAMERA_CONFIG_TYPE_SERIAL_LED_CARD_COMMON_TIME_CFG_PARAM_RSP	= 0x5167,	

	ICE_CAMERA_CONFIG_TYPE_CONTROL_SERIAL_CARD_COMMON_BASE_PARAM  = 0x5168,			
	ICE_CAMERA_CONFIG_TYPE_CONTROL_SERIAL_CARD_COMMON_BASE_PARAM_RSP  = 0x5169,		
	
	ICE_CAMERA_CONFIG_TYPE_SET_ENCRYPT_PARAM		= 0x516A,		
	ICE_CAMERA_CONFIG_TYPE_SET_ENCRYPT_PARAM_RSP	= 0x516B,		

	ICE_CAMERA_CONFIG_TYPE_SET_RS485_TRANS_TYPE_SFM = 0x516C,		
	ICE_CAMERA_CONFIG_TYPE_SET_RS485_TRANS_TYPE_SFM_RSP = 0x516D, 

	ICE_CAMERA_CONFIG_TYPE_GET_RS485_TRANS_TYPE_SFM = 0x516E,		
	ICE_CAMERA_CONFIG_TYPE_GET_RS485_TRANS_TYPE_SFM_RSP = 0x516F, 


	ICE_CAMERA_CONFIG_TYPE_SET_DEVICE_PARAM		= 0x5170,		
	ICE_CAMERA_CONFIG_TYPE_SET_DEVICE_PARAM_RSP	= 0x5171,		
	ICE_CAMERA_CONFIG_TYPE_GET_DEVICE_PARAM		= 0x5172,		
	ICE_CAMERA_CONFIG_TYPE_GET_DEVICE_PARAM_RSP	= 0x5173,		

	ICE_CAMERA_CONFIG_TYPE_SET_ALARM_IN_EXT_PARAM		= 0x5174,			
	ICE_CAMERA_CONFIG_TYPE_SET_ALARM_IN_EXT_PARAM_RSP	= 0x5175,		
	ICE_CAMERA_CONFIG_TYPE_GET_ALARM_IN_EXT_PARAM		= 0x5176,			
	ICE_CAMERA_CONFIG_TYPE_GET_ALARM_IN_EXT_PARAM_RSP	= 0x5177,		

	ICE_CAMERA_CONFIG_TYPE_SET_FAC_MODE = 0x5178,			
	ICE_CAMERA_CONFIG_TYPE_SET_FAC_MODE_RSP = 0x5179,		



	//up to 0x5300 for 83C reserved
	ICE_CAMERA_CONFIG_TYPE_SET_USER_LICENSE	= 0x5300,               
	ICE_CAMERA_CONFIG_TYPE_SET_USER_LICENSE_RSP	= 0x5301,            
	ICE_CAMERA_CONFIG_TYPE_CHECK_USER_LICENSE	= 0x5302,            
	ICE_CAMERA_CONFIG_TYPE_CHECK_USER_LICENSE_RSP	= 0x5303,	    
	ICE_CAMERA_CONFIG_TYPE_GET_RTSP_SESSION_COUNT = 0x5304,		
	ICE_CAMERA_CONFIG_TYPE_GET_RTSP_SESSION_COUNT_RSP = 0x5305,	

	ICE_CAMERA_CONFIG_TYPE_RESET_USER_LICENSE = 0x5306,			
	ICE_CAMERA_CONFIG_TYPE_RESET_USER_LICENSE_RSP = 0x5307,		

	ICE_CAMERA_CONFIG_TYPE_HAS_USER_LICENSE = 0x5308,			
	ICE_CAMERA_CONFIG_TYPE_HAS_USER_LICENSE_RSP = 0x5309,		


	ICE_CAMERA_CONFIG_TYPE_GET_DIVISOR_CTL_LIGHT_CONFIG = 0x530a,		
	ICE_CAMERA_CONFIG_TYPE_GET_DIVISOR_CTL_LIGHT_CONFIG_RSP = 0x530b,	

	ICE_CAMERA_CONFIG_TYPE_SET_DIVISOR_CTL_LIGHT_CONFIG = 0x530c,		
	ICE_CAMERA_CONFIG_TYPE_SET_DIVISOR_CTL_LIGHT_CONFIG_RSP = 0x530d,	

	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_AF_ZOOM = 0x530e,		
	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_AF_ZOOM_RSP = 0x530f,	

	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_AF_RESET	= 0x5310,
	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_AF_RESET_RSP	= 0x5311,

	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_FOCUS_FAR	= 0x5312,
	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_FOCUS_FAR_RSP	= 0x5313,

	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_FOCUS_NEAR	= 0x5314,
	ICE_CAMERA_CONFIG_TYPE_SET_NORMAL_FOCUS_NEAR_RSP = 0x5315,

	ICE_CAMERA_CONFIG_TYPE_GET_SCENE_MODE = 0x5316, 	
	ICE_CAMERA_CONFIG_TYPE_GET_SCENE_MODE_RSP = 0x5317, 

	ICE_CAMERA_CONFIG_TYPE_SET_SCENE_MODE = 0x5318, 	
	ICE_CAMERA_CONFIG_TYPE_SET_SCENE_MODE_RSP = 0x5319,

	ICE_CAMERA_CONFIG_TYPE_AUDIO_TEST = 0x531a, 	
	ICE_CAMERA_CONFIG_TYPE_AUDIO_TEST_RSP = 0x531b, 


	ICE_CAMERA_CONFIG_TYPE_GET_LOG_CONFIG = 0x531c,		
	ICE_CAMERA_CONFIG_TYPE_GET_LOG_CONFIG_RSP = 0x531d,

	ICE_CAMERA_CONFIG_TYPE_SET_LOG_CONFIG = 0x531e,		
	ICE_CAMERA_CONFIG_TYPE_SET_LOG_CONFIG_RSP = 0x531f,	

	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_LED_CONFIG = 0x5320,             
	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_LED_CONFIG_RSP = 0x5321,         
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_LED_CONFIG = 0x5322,            
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_LED_CONFIG_RSP = 0x5323,         

	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_CHARGE_RULE = 0x5324,             
	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_CHARGE_RULE_RSP = 0x5325,        
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_CHARGE_RULE = 0x5326,            
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_CHARGE_RULE_RSP = 0x5327,        

	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_MULTICAST = 0x5328,             
	ICE_CAMERA_CONFIG_TYPE_SET_OFFLINE_MULTICAST_RSP = 0x5329,        
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_MULTICAST = 0x532a,             
	ICE_CAMERA_CONFIG_TYPE_GET_OFFLINE_MULTICAST_RSP = 0x532b,         

	ICE_CAMERA_CONFIG_TYPE_READ_OFFLINE_VEHICLE_INFO_LIST		= 0x532c,		
	ICE_CAMERA_CONFIG_TYPE_READ_OFFLINE_VEHICLE_INFO_LIST_RSP	= 0x532d,		

	ICE_CAMERA_CONFIG_TYPE_GET_DEVICE_INFO  = 0x532e,                  
	ICE_CAMERA_CONFIG_TYPE_GET_DEVICE_INFO_RSP = 0x532f,               

	ICE_CAMERA_CONFIG_TYPE_OCD_RMALLDB	= 0x5331,						
	ICE_CAMERA_CONFIG_TYPE_OCD_RMALLDB_RSP	= 0x5332,					

	ICE_CAMERA_CONFIG_TYPE_GET_ICE_OCD_TO_LED	= 0x5333,			   
	ICE_CAMERA_CONFIG_TYPE_GET_ICE_OCD_TO_LED_RSP	= 0x5334,			

	ICE_CAMERA_CONFIG_TYPE_READ_OFFLINE_COST_LIST	= 0x5337,				
	ICE_CAMERA_CONFIG_TYPE_READ_OFFLINE_COST_LIST_RSP	= 0x5338,			

	ICE_CAMERA_CONFIG_TYPE_GET_MAIN_SUB_MODE_CFG	= 0x5339,			
	ICE_CAMERA_CONFIG_TYPE_GET_MAIN_SUB_MODE_CFG_RSP	= 0x533a,		

	ICE_CAMERA_CONFIG_TYPE_SET_MAIN_SUB_MODE_CFG	= 0x533b,			
	ICE_CAMERA_CONFIG_TYPE_SET_MAIN_SUB_MODE_CFG_RSP	= 0x533c,		

	ICE_CAMERA_CONFIG_TYPE_SET_ICE_OCD_TO_VDC	= 0x533d,				
	ICE_CAMERA_CONFIG_TYPE_SET_ICE_OCD_TO_VDC_RSP	= 0x533e,           



	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT3		= 0x533f,				
	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT3_RSP	= 0x5340,				

	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT4		= 0x5341,				
	ICE_CAMERA_CONFIG_TYPE_SET_RELAY_OUT4_RSP	= 0x5342,				

	ICE_CAMERA_CONFIG_TYPE_READ_LOCAL_OFFLINE_COST_LIST	= 0x5343,		
	ICE_CAMERA_CONFIG_TYPE_READ_LOCAL_OFFLINE_COST_LIST_RSP= 0x5344,		


	ICE_CAMERA_CONFIG_TYPE_UPDATE_VACANCIES = 0x5354,                                     
	ICE_CAMERA_CONFIG_TYPE_UPDATE_VACANCIES_RSP = 0x5355,			 

	ICE_CAMERA_CONFIG_TYPE_SET_TALK_BACK_VOLUME = 0x5356,			  //!<set talk back volume
	ICE_CAMERA_CONFIG_TYPE_SET_TALK_BACK_VOLUME_RSP = 0x5357,			 //!<

	ICE_CAMERA_CONFIG_TYPE_GET_TALK_BACK_VOLUME = 0x5358,			  //!<get talk back volume
	ICE_CAMERA_CONFIG_TYPE_GET_TALK_BACK_VOLUME_RSP = 0x5359,			 //!<		


	ICE_CAMERA_CONFIG_TYPE_SET_UID = 0x5360,			  //!<set UID
	ICE_CAMERA_CONFIG_TYPE_SET_UID_RSP = 0x5361,			 //!<

	ICE_CAMERA_CONFIG_TYPE_GET_UID = 0x5362,			  //!<get
	ICE_CAMERA_CONFIG_TYPE_GET_UID_RSP = 0x5363,			 //!<		


	//xinjiang
	ICE_CAMERA_CONFIG_TYPE_SET_HTTP_POST2_PARAM		= 0x5366,		
	ICE_CAMERA_CONFIG_TYPE_SET_HTTP_POST2_PARAM_RSP	= 0x5367,		
	ICE_CAMERA_CONFIG_TYPE_GET_HTTP_POST2_PARAM		= 0x5368,		
	ICE_CAMERA_CONFIG_TYPE_GET_HTTP_POST2_PARAM_RSP	= 0x5369,		

	ICE_CAMERA_CONFIG_TYPE_SET_CTP_CFG = 0x536A,			 
	ICE_CAMERA_CONFIG_TYPE_SET_CTP_CFG_RSP = 0x536B,		 
	ICE_CAMERA_CONFIG_TYPE_GET_CTP_CFG = 0x536C,			 
	ICE_CAMERA_CONFIG_TYPE_GET_CTP_CFG_RSP = 0x536D,		

	ICE_CAMERA_CONFIG_TYPE_SET_NETWORK_DHCP = 0x5370,  		   
	ICE_CAMERA_CONFIG_TYPE_SET_NETWORK_DHCP_RSP = 0x5371,   	   
	ICE_CAMERA_CONFIG_TYPE_GET_NETWORK_DHCP = 0x5372,		   
	ICE_CAMERA_CONFIG_TYPE_GET_NETWORK_DHCP_RSP = 0x5373,	  

	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_4G_PARAM	= 0x5374,		
	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_4G_PARAM_RSP	= 0x5375,	
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_4G_PARAM	= 0x5376,		
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_4G_PARAM_RSP	= 0x5377,	

	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_ONVIF_CONFIG	= 0x5378,  	     
	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_ONVIF_CONFIG_RSP	= 0x5379,	    
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_ONVIF_CONFIG	= 0x537A,             
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_ONVIF_CONFIG_RSP	= 0x537B,            


	ICE_CAMERA_CONFIG_TYPE_SET_HTTP_POST_NEW_PARAM		= 0x5380,		
	ICE_CAMERA_CONFIG_TYPE_SET_HTTP_POST_NEW_PARAM_RSP	= 0x5381,		
	ICE_CAMERA_CONFIG_TYPE_GET_HTTP_POST_NEW_PARAM		= 0x5382,		
	ICE_CAMERA_CONFIG_TYPE_GET_HTTP_POST_NEW_PARAM_RSP	= 0x5383,		


	ICE_NEW_CAMERA_SET_OLD_UPDATE_MODE_ENABLE  = 0x5384,  
	ICE_NEW_CAMERA_SET_OLD_UPDATE_MODE_ENABLE_RSP = 0x5385,  //!< 
	ICE_NEW_CAMERA_GET_OLD_UPDATE_MODE_ENABLE  = 0x5386,  //!< 
	ICE_NEW_CAMERA_GET_OLD_UPDATE_MODE_ENABLE_RSP = 0x5387,  //!< 

	ICE_NEW_CAMERA_SET_USER_MODEL                = 0x5388,  //!< 
	ICE_NEW_CAMERA_SET_USER_MODEL_RSP            = 0x5389,  //!< 
	ICE_NEW_CAMERA_GET_USER_MODEL				 = 0x538A,  //!< 
	ICE_NEW_CAMERA_GET_USER_MODEL_RSP            = 0x538B,  //!< 

	ICE_SET_PING_SERVER_ACTION                = 0x538C,		
	ICE_SET_PING_SERVER_ACTION_RSP            = 0x538D,		
	ICE_GET_PING_SERVER_ACTION		        = 0x538E,		
	ICE_GET_PING_SERVER_ACTION_RSP	        = 0x538F,		

	ICE_CAMERA_CONFIG_TYPE_SET_CLOUD_PARAM = 0x5390,          
	ICE_CAMERA_CONFIG_TYPE_SET_CLOUD_PARAM_RSP = 0x5391,     
	ICE_CAMERA_CONFIG_TYPE_GET_CLOUD_PARAM = 0x5392,           
	ICE_CAMERA_CONFIG_TYPE_GET_CLOUD_PARAM_RSP = 0x5393,       

	ICE_CAMERA_CONFIG_TYPE_SET_NETWORK_DIAGNOSTICS  = 0x5394,  
	ICE_CAMERA_CONFIG_TYPE_SET_NETWORK_DIAGNOSTICS_RSP = 0x5395,  //!< 
	ICE_CAMERA_CONFIG_TYPE_STOP_NETWORK_DIAGNOSTICS  = 0x5396,  
	ICE_CAMERA_CONFIG_TYPE_STOP_NETWORK_DIAGNOSTICS_RSP = 0x5397,  //!< 
	ICE_CAMERA_CONFIG_TYPE_GET_NETWORK_DIAGNOSTICS  = 0x5398,  //!< 
	ICE_CAMERA_CONFIG_TYPE_GET_NETWORK_DIAGNOSTICS_RSP = 0x5399,  //!< 

	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_ALIVETIME = 0x539A,  
	ICE_CAMERA_CONFIG_TYPE_SET_CAMERA_ALIVETIME_RSP = 0x539B, 

	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_ALIVETIME = 0x539C, 
	ICE_CAMERA_CONFIG_TYPE_GET_CAMERA_ALIVETIME_RSP = 0x539D,


	ICE_CAMERA_CONFIG_TYPE_SET_PRODUCT_MODEL = 0x6001,
	ICE_CAMERA_CONFIG_TYPE_SET_PRODUCT_MODEL_RSP = 0x6002,
	ICE_CAMERA_CONFIG_TYPE_GET_PRODUCT_MODEL = 0x6003,
	ICE_CAMERA_CONFIG_TYPE_GET_PRODUCT_MODEL_RSP = 0x6004,

	ICE_CAMERA_CONFIG_TYPE_BIND_IO_IN_PRO = 0x6007,
	ICE_CAMERA_CONFIG_TYPE_BIND_IO_IN_PRO_RSP = 0x6008,
	ICE_CAMERA_CONFIG_TYPE_BIND_IO_OUT_PRO = 0x6009,
	ICE_CAMERA_CONFIG_TYPE_BIND_IO_OUT_PRO_RSP = 0x600a,

	ICE_CAMERA_CONFIG_TYPE_ADD_SERAIL_PRO = 0x600b,	
	ICE_CAMERA_CONFIG_TYPE_ADD_SERAIL_PRO_RSP = 0x600c,	
	ICE_CAMERA_CONFIG_TYPE_DEL_SERAIL_PRO = 0x600d,
	ICE_CAMERA_CONFIG_TYPE_DEL_SERAIL_PRO_RSP = 0x600e,
	ICE_CAMERA_CONFIG_TYPE_BIND_SERAIL_PRO = 0x6010,
	ICE_CAMERA_CONFIG_TYPE_BIND_SERAIL_PRO_RSP = 0x6011,
	ICE_CAMERA_CONFIG_TYPE_GET_SERIAL_PRO_LIST = 0x6012,
	ICE_CAMERA_CONFIG_TYPE_GET_SERIAL_PRO_LIST_RSP = 0x6013,


	ICE_CAMERA_INNER_CONFIG_TYPE_SET_ICE_OCD_TO_VDC	= 0x9001,				
	ICE_CAMERA_INNER_CONFIG_TYPE_SET_ICE_OCD_TO_VDC_RSP	= 0x9002,		

	ICE_CAMERA_CONFIG_TYPE_END                      = 0x941f,

} ICE_CAMERA_CONFIG_TYPE_E;

#define DIAG_RESU_MAXLEN  4096*2

typedef struct
{
	unsigned char ucNetworkDiagCmd[100];          
	unsigned char ucDiagResuBuff[DIAG_RESU_MAXLEN];   
	unsigned char ucReserved[10];
}NETWORK_DIAGNOSTICS_PARAM;

#define CLOUD_ID_LEN 64
#define CLOUD_NET_LEN 128

typedef struct _CLOUD_CFG_PARAM_S
{
	ICE_S32 cloudEn;			
	ICE_S32 mode;				
	ICE_S32 sslEn;			
	ICE_S32 sslPort;			
	ICE_S32 camIdType;		
	ICE_S32 interval;			
	ICE_S32 maxSendCnt;		
	ICE_S32 fullImgEn;		
	ICE_S32 miniImgEn;		
	ICE_S32 ioInEn;			
	ICE_U8 ioInNum[8];		
	ICE_U8 parkId[CLOUD_ID_LEN];		

	ICE_U8 cloudDomain[CLOUD_NET_LEN];	
	ICE_U8 path[CLOUD_NET_LEN];		
	ICE_S32 port;				
	ICE_S32 syncTimeEn;		
	ICE_S32 syncTimeOffset;	

	ICE_S32 osEn;				
	ICE_S32 osType;			
	ICE_U8 osDomain[CLOUD_NET_LEN];	
	ICE_S32 iPicUploadType;            

	ICE_U8 reserved[252];	
	ICE_S32 extParamSize;		
} CLOUD_CFG_PARAM_S;

typedef struct tagT_CloudM2CfgParam
{
	ICE_S8 key[64];
	ICE_U8 reserved[128]; 
} T_CloudM2CfgParam;

typedef struct tagT_CloudM3CfgParam
{
	ICE_S8 accessKey[CLOUD_ID_LEN]; 
	ICE_S8 accessSecret[CLOUD_ID_LEN];
	ICE_U8 reserved[128];
} T_CloudM3CfgParam;

typedef struct T_CloudM4CfgParamV1
{
	ICE_S8 acAccessKey[CLOUD_ID_LEN];	   
	ICE_S8 acAccessSecret[CLOUD_ID_LEN];
} T_CloudM4CfgParamV1;

typedef struct
{
	int InVolume; //0- 76
	int OutVolume;//0- 76
	int as32Reserved[4]; 

} ICE_TALK_BACK_VOLUME_PARAM;


typedef struct
{
	ICE_U32 u32Mode;             
	ICE_U32 u32Broadcast_order;     
	ICE_U32 u32Reserved[15];           
} OfflineAoParam;


typedef struct {
  ICE_S32 mac_list_size;  // 
  ICE_S8 phone_mac_list[100][18];
  ICE_S8 reserved[50*18];
} ICE_Phone_Mac_List;



typedef union
{
	ICE_U8 au8Buffer[ICE_BUF_SIZE_CONFIG];		
} ICE_CONFIG_DATA_INTERNAL_U;

//! \ingroup group_communication

typedef struct  
{
	ICE_OPER_DATA_S stHead;					
	ICE_CONFIG_DATA_INTERNAL_U unData;		
} ICE_CONFIG_DATA_S;

typedef struct
{
 ICE_U8 u8ModeNo;
 ICE_U8 u8Reserved[3];
 ICE_U32 u32BeginTime;
 ICE_U32 u32Interval;
 ICE_U8 u8Reserved1[52];
}ICE_SCENE_MODE_ST;

///////////////////////////////////////////////////////////////////////////////////////////////////
//! \ingroup group_communication

typedef enum
{
	ICE_VIDEO_STREAM_TYPE_BASE 						= 0x6000,		
	ICE_VIDEO_STREAM_TYPE_VENC_H264					= 0x6001,		
	ICE_VIDEO_STREAM_TYPE_VENC_MJPEG				= 0x6002,		
	ICE_VIDEO_STREAM_TYPE_VENC_MPEG2				= 0x6004,		
	ICE_VIDEO_STREAM_TYPE_VENC_MPEG4				= 0x6008,		
	ICE_VIDEO_STREAM_TYPE_END						= 0x6009,		
}ICE_VIDEO_STREAM_E;


typedef struct{
	char default_data[64];  
	char blacklist_data[64]; 
	char tmp_data[64];     
	char reserve[256];
} Led_Display_Pro1_Param;


typedef struct {
	int serial_card_type;		
	int serial_card_addr;		
	int reserved[16];
}Led_Card_Serial_Common_param;


typedef struct {
	int address;			
	int mainsection;		
	int subsection;			
	int subsection_nor;		
	int enter_mode;			 
	int stop_time;			
	int stop_mode;			
	int exit_mode;			
	unsigned char maintext[64];		
	unsigned char subtext[64];		
	unsigned char subtext_nor[64];   
	int reserved[16];
} Led_Card_2_Display_Cfg_param;


typedef struct {
	int address;			
	int modify_addr_enable;
	int modify_addr;		
	unsigned char whitelist_broadcasttext[50]; 
	unsigned char normal_broadcasttext[50];	  
	unsigned char reserved[20];
}Led_Card_2_attach_broadcast_cfg_param;


typedef struct {
	int relay_time;											
	int change_addr_enable;									
	int change_addr_led;										
	Led_Card_2_Display_Cfg_param led_protol_2_card[3];		
	Led_Card_2_attach_broadcast_cfg_param broadcast_card;	
	int reserved[20];
}Led_Card_2_total_cfg_param;


typedef enum {
	LED_CARD_2_IN_INSTANT_DISPLAY			= 0x00,		
	LED_CARD_2_IN_RIGHT_TO_LEFT				= 0x01,		
	LED_CARD_2_IN_LEFT_TO_RIGHT				= 0x02,		
	LED_CARD_2_IN_DOWN_TO_UP				= 0x03,		
	LED_CARD_2_IN_UP_TO_DOWN				= 0x04,		
	LED_CARD_2_IN_PULL_CURTAIN_TO_DOWN		= 0x05,		
	LED_CARD_2_IN_PULL_CURTAIN_TO_UP		= 0x06,		
	LED_CARD_2_IN_PULL_CURTAIN_TO_LEFT		= 0x07,		
	LED_CARD_2_IN_PULL_CURTAIN_TO_RIGHT		= 0x08,		
	LED_CARD_2_IN_BACK_LIGHT				= 0x09,		
	LED_CARD_2_IN_SPACE_OPERATION			= 0x0A,		
	LED_CARD_2_IN_MEDIUM_SPEED_LEFT			= 0x0B,		
	LED_CARD_2_IN_MEDIUM_SPEED_RIGHT		= 0x0C,		
	LED_CARD_2_IN_VERBATIM_DISPLAY			= 0x0D,		
	LED_CARD_2_IN_OPEN_GATE_LEFT			= 0x0E,		
	LED_CARD_2_IN_OPEN_GATE_RIGHT			= 0x0F,		
	LED_CARD_2_IN_SNOWFLAKE_DISPLAY			= 0x10,		
	LED_CARD_2_IN_ROW_DISPLAY				= 0x11,		
	LED_CARD_2_IN_COL_DISPLAY				= 0x12,	
	LED_CARD_2_IN_SLOW_SPEED_LEFT			= 0x13,		
	LED_CARD_2_IN_SLOW_SPEED_RIGHT			= 0x14,		
	LED_CARD_2_IN_SERIES_DISPLAY			= 0x15,		
	LED_CARD_2_IN_NONE_OPERATION			= 0x16,		
	LED_CARD_2_IN_SLOW_SPEED_SERIES_DISPLAY = 0x17,		
	LED_CARD_2_IN_MAX_LED_BS_DISPLAY	
}led_card_2_insert_mode;


typedef enum {
	LED_CARD_2_REMAIN_MODE0		= 0x00,					
	LED_CARD_2_REMAIN_MODE1		= 0x01,					
	LED_CARD_2_REMAIN_MODE2		= 0x02,					
	LED_CARD_2_FAST_FLASH		= 0x03,  				
	LED_CARD_2_MIDEUM_FLASH		= 0x04,					
	LED_CARD_2_SLOW_FLASH		= 0x05,					
	LED_CARD_2_SINGLE_FLASH		= 0x06,					
	LED_CARD_2_ENGLISH_DATE		= 0x07,					
	LED_CARD_2_ENGLISH_TIME		= 0x08,					
	LED_CARD_2_CHINESE_DATE		= 0x09,					
	LED_CARD_2_CHINESE_TIME		= 0x0A,					
	LED_CARD_2_CONTROL_MODE		= 0x0B,					
	LED_CARD_2_LOOP_MODE		= 0x0C,					
	LED_CARD_2_TMPREATURE_MODE  = 0x0D,					
	LED_CARD_2_MAX_STOP_DISPLAY_MODE
	
}led_card_2_stop_display_mode;


typedef enum {
	LED_CARD_2_EXIT_INSTANT_DISAPPEAR			= 0x00,		
	LED_CARD_2_EXIT_RIGHT_TO_LEFT				= 0x01,		
	LED_CARD_2_EXIT_LEFT_TO_RIGHT				= 0x02,		
	LED_CARD_2_EXIT_DOWN_TO_UP					= 0x03,		
	LED_CARD_2_EXIT_UP_TO_DOWN					= 0x04,		
	LED_CARD_2_EXIT_PULL_CURTAIN_TO_DOWN		= 0x05,		
	LED_CARD_2_EXIT_PULL_CURTAIN_TO_UP			= 0x06,		
	LED_CARD_2_EXIT_PULL_CURTAIN_TO_LEFT		= 0x07,	
	LED_CARD_2_EXIT_PULL_CURTAIN_TO_RIGHT		= 0x08,		
	LED_CARD_2_EXIT_BACK_LIGHT					= 0x09,	
	LED_CARD_2_EXIT_SPACE_OPERATION				= 0x0A,		
	LED_CARD_2_EXIT_MEDIUM_SPEED_LEFT			= 0x0B,		
	LED_CARD_2_EXIT_MEDIUM_SPEED_RIGHT			= 0x0C,		
	LED_CARD_2_EXIT_VERBATIM_DISAPPEAR			= 0x0D,		
	LED_CARD_2_EXIT_OPEN_GATE_LEFT				= 0x0E,		
	LED_CARD_2_EXIT_OPEN_GATE_RIGHT				= 0x0F,		
	LED_CARD_2_EXIT_SNOWFLAKE_DISAPPEAR			= 0x10,		
	LED_CARD_2_EXIT_ROW_DISAPPEAR				= 0x11,		
	LED_CARD_2_EXIT_COL_DISAPPEAR				= 0x12,		
	LED_CARD_2_EXIT_SLOW_SPEED_LEFT				= 0x13,		
	LED_CARD_2_EXIT_SLOW_SPEED_RIGHT			= 0x14,		
	LED_CARD_2_EXIT_SERIES_DISAPPEAR			= 0x15,		
	LED_CARD_2_EXIT_NONE_OPERATION				= 0x16,		
	LED_CARD_2_EXIT_SLOW_SPEED_SERIES_DISAPPEAR = 0x17,		
	LED_CARD_2_EXIT_MAX_LED_BS_DISPLAY
}led_card_2_exit_mode;


typedef struct
{
	char szAppVersion[128];   
	char szAlgoVersion[256]; 
	int szIsEnc;              
	char szAppTime[16];      
	char szReserved[1024];    
} ICE_CameraInfo;


typedef struct{
	ICE_U8 u8AppLog;		  
	ICE_U8 u8AlgoLog;		  	
	ICE_U8 u8AlgoTimeLog;	  
	ICE_U8 u8DebugLog;		  
	ICE_U8 u8NomalLog;		 
	ICE_U8 u8NetRealTimeLog;  
	ICE_U8 u8SaveLogToSD;	  
	ICE_U8 u8NetLogAddr[16];  
	ICE_U8 u8Rs485;
	ICE_U8 u8HttpPost;
	ICE_U8 u8LogLevel;
	ICE_U8 reserved[38];   //reserved
}ICE_LOG_CONFIG;

#define NET_LOG_LEVEL_DBG   0x05
#define NET_LOG_LEVEL_INF   0x04
#define NET_LOG_LEVEL_NOT   0x03
#define NET_LOG_LEVEL_WAR   0x02
#define NET_LOG_LEVEL_ERR   0x01
#define NET_LOG_LEVEL_FAT   0x00


typedef struct 
{
	ICE_U8 u8device_model[16];
	ICE_U8 reserved[48];
}ICE_DEVICE_INFO;



typedef struct
{
	ICE_U8	ucEnabled;      
	ICE_U16	usOfflinePort;  
	ICE_U32	uiIP;			
	ICE_U8	aucReserved[10];
}ICE_OFFLINE_MULTICAST_CONFIG;





#define MAX_LED_CONTENT   64  
#define MAX_LED_COUNT     4      


typedef enum
{
	LED_SCREEN_1 = 0,   
	LED_SCREEN_2,       
	LED_SCREEN_3,       
	LED_SCREEN_4,       
	LED_SCREEN_5,       
	LED_SCREEN_6,       
	LED_SCREEN_7,      
	LED_SCREEN_8,       
	LED_SCREEN_9,        
	LED_SCREEN_10,       
	LED_SCREEN_11,
	LED_SCREEN_12,
	LED_SCREEN_13,
	LED_SCREEN_14,
	LED_SCREEN_15,
	LED_SCREEN_16,
	LED_SCREEN_17, 

	LED_SCREEN_18,   
	LED_SCREEN_19, 
	LED_SCREEN_20, 
	LED_SCREEN_21, 
	LED_SCREEN_22, 
	LED_SCREEN_23,
	LED_SCREEN_MAX
}E_LedScreenType;

typedef enum
{
	COLOR_TYPE_RED =0,  
	COLOR_TYPE_GREEN,  
	COLOR_TYPE_YELLO,  
	COLOR_TYPE_BLUE ,   
	COLOR_TYPE_WHITE,  
	COLOR_TYPE_BLACK,  
	COLOR_TYPE_OTHER,   
	COLOR_TYPE_YELLOW_GREEN, 
	COLOR_TYPE_ALL,    
}E_ColorType;

typedef enum
{
	LED_SUB_MOD_VEH_PLATE=0,
	LED_SUB_MOD_VEH_WELCOME,
	LED_SUB_MOD_VEH_PAY,  
	LED_SUB_MOD_VEH_TIME, 
	LED_SUB_MOD_VEH_PERIOD, 
	LED_SUB_MOD_TIME,
	LED_SUB_MOD_VEH_LEFT,
	LED_SUB_MOD_CUSTOM, 
	LED_SUB_MOD_MAX,
}E_SubLedMode;

typedef struct
{
	ICE_U8   ucContentEnable;              
	ICE_U8   ucTimeEnable;                 
	ICE_U8   ucInterval;					
	ICE_U8   aucContent[MAX_LED_CONTENT];   
	ICE_U8   ucColor;                
	ICE_U8   ucLeftVehEnable;               
	ICE_U8   aucReserved[9];             
}T_SubLedSetup;   

typedef struct
{
	ICE_U8   ucContentEnable;               
	ICE_U8   ucVehTypeEnable;              
	ICE_U8   ucPlateEnable;                
	ICE_U8   ucLeftDaysEnable;              
	ICE_U8   ucParkPay;                     
	ICE_U8   ucParkLastTime;                
	ICE_U8   ucTmpCardColor;               
	ICE_U8   ucMonthCardColor;              
	ICE_U8   aucContent[MAX_LED_CONTENT];   
	ICE_U8   aucReserved[10];               
}T_M_SubLedSetup;  

typedef struct
{
	ICE_U8   ucContentEnable;               
	ICE_U8   ucVehTypeEnable;               
	ICE_U8   ucPlateEnable;                 
	ICE_U8   ucLeftDaysEnable;             
	ICE_U8   ucParkPay;                     
	ICE_U8   ucParkLastTime;                  
	ICE_U8   ucWelorByeEnable;              
	ICE_U8   aucWelorByeContent[MAX_LED_CONTENT];   
	ICE_U8   aucSelfContent[MAX_LED_CONTENT];   
	ICE_U8   aucReserved[10];               
}T_M_AudioLedSetup;  

typedef struct   
{
	E_LedScreenType    sreenType;                   
	ICE_U32            screenMode;                   
	ICE_U32            cameraType;                   
	ICE_U8             ucAudioEnable;              

	ICE_U8             ucReserved[3];
	T_SubLedSetup      atSubLedInIdle[MAX_LED_COUNT];
	T_M_SubLedSetup   atSubLedInBusy[MAX_LED_COUNT];
	T_M_AudioLedSetup atSubLedInBusyAudio;         
	T_SubLedSetup      atSubLedOutIdle[MAX_LED_COUNT];
	T_M_SubLedSetup   atSubLedOutBusy[MAX_LED_COUNT];
	T_M_AudioLedSetup atSubLedOutBusyAudio;         
	ICE_U32            uc485ctrlEnable;              
	ICE_U32            ucLeftVehPlace;               

	ICE_U16			   FK_password;      
	ICE_U8             ucFKEncipherment; 
	ICE_U8             aucReserved[89];  
}ICE_OFFLINE_LED_CONFIG;





#define MAX_PAY_ITEM           2     
#define MAX_TIMESECTION_NUM    3      
#define MAX_PARTTIME_SET_NUM   40    

typedef enum
{
	PAY_MODE_UNKNOW = 0,
	PAY_MODE_ONTIME,      
	PAY_MODE_TIMES,       
	PAY_MODE_TIME_SECTION,
	PAY_MODE_PARTTIME,
	PAY_MODE_MAX
}E_PayMode;   

typedef enum
{
	STRATEGY_TYPE_UNKNOW = 0,
	STRATEGY_TYPE_NOPAY, 
	STRATEGY_TYPE_CYCLE,
	STRATEGY_TYPE_BYTIME,
	STRATEGY_TYPE_MAX
}E_StrategyType;  

typedef struct
{
	ICE_U8	ucEnable;
	ICE_U16	usCyclePay;
	ICE_U16	usStartPay;
	ICE_U16	usFreeTime;
	ICE_U16	usCycleTime;
	ICE_U16	usStartTime;
	ICE_U16	usTotalPreDay;
	ICE_U8	aucReserved[10]; 
}T_OnTimePay;

typedef struct
{
	ICE_U8	ucEnable;
	ICE_U8	ucMaxTime;
	ICE_U16	usPayOne;
	ICE_U16	usFreeTime;
	ICE_U16	usFreeStartTime;  
	ICE_U16	usFreeEndTime; 
	ICE_U8	aucReserved[10]; 
}T_TimesPay; 

typedef struct
{
	ICE_U8	ucEnable;
	ICE_U16	usCyclePay;
	ICE_U16	usStartPay;
	ICE_U16	usFreeTime;
	ICE_U16	usCycleTime;
	ICE_U16	usStartTime;
	ICE_U16	usTotalPreDay;
	ICE_U16	usSectionStartTime; 
	ICE_U16	usSectionEndTime;
	ICE_U8	aucReserved[10]; 
}T_TimeSectionPay;

typedef struct  
{
   ICE_U16  parkTime; 
   ICE_U16  usPay;     
}SetionSet;

typedef struct 
{
	ICE_U16		usCyclePayMax;  
	ICE_U16		usFreeTime;		
	SetionSet   usPartTime[MAX_PARTTIME_SET_NUM];
	ICE_U8		aucReserved[10];  
}T_PartTimesPay;


typedef struct   
{
	ICE_U32           offEnable;		
	ICE_U32		      ExtranceRule;    
	ICE_U32			  ExitRule;		    

	E_PayMode		  ucRuleMode; 		
	E_StrategyType	  ucStrategyType;	
	ICE_U16			  usTimeLength;		

	T_OnTimePay       atOnTimePay[MAX_PAY_ITEM]; 
	T_TimesPay		  atTimesPay[MAX_PAY_ITEM];  
	T_TimeSectionPay  atTimeSectionPay[MAX_PAY_ITEM*MAX_TIMESECTION_NUM]; 
    T_PartTimesPay    atPartTimePay;             

	ICE_U8			  aucReserved[30];
}ICE_OFFLINE_CHARGE_RULE;




typedef struct   
{
	E_PayMode		  ucRuleMode; 		
	ICE_U8			  vehicleType;      
	ICE_U32			  usTotalMoney;		
	ICE_U32           usParkingTime;    
	ICE_U32           usRecordID;       
	ICE_U8            usVehiclePlate[16];
	ICE_U8            reserved[20];     
}ICE_VEHPAY_RSP;


typedef enum  
{
	ICE_CAMERA_OFFLINE_PAY_HEARTBEAT		= 0x4001,		
	ICE_CAMERA_OFFLINE_PAY_HEARTBEAT_RSP	= 0x4002,		

	ICE_CAMERA_OFFLINE_PAY_VEHICLE_INFO		= 0x4003,		
	ICE_CAMERA_OFFLINE_PAY_VEHICLE_INFO_RSP	= 0x4004,		

}ICE_PAYRULE_TYPE_E;
/****************************************************************************************************/

typedef struct
{
	unsigned char ucType; 
	char aucLplPath[256];
}T_GetPrensentVehInfo;



typedef struct __MAIN_SUB_MODE
{
	ICE_U32 enable;  
	ICE_U32 status;
	ICE_U32 msec;   
	ICE_U8  ip_addr[16]; 
	ICE_U8  reserved[32];
}ICE_MAIN_SUB_MODE_INFO;

typedef struct  
{
	ICE_S8 szDeviceType[32];
	ICE_S8 szDeviceMac[16];
	ICE_S8 szDeviceVersion[256];
	ICE_S8 szReserve[128];
}ICE_DEVICE_PARAM;


typedef struct T_SntpCfg{
	ICE_S32   iEn;           
	ICE_S32   iSyncPeriod;   
	ICE_S32   iSyncDiff;      
	ICE_S32   iSrvPort;       
	ICE_S8    acSrvAddr[128]; 
	ICE_S8    acResearve[256]; 
}T_SntpCfg;

typedef struct tagT_TimeZone
{
	ICE_S8 acTimeZoneStr[32];
	ICE_S8 acResearve[256];
} T_TimeZone;

//////////////////////////////////////////////////////////////////////////
#define TLD_GATE_KEY_LEN 64
#define TLD_GATE_NET_LEN 128
#define TLD_GATE_ROUTEURLLEN 256

#define TLD_GATE_MAX_ROUTESERVER_NUM 8


#define TLD_GATE_CONFIG "/data/config/TldGateCfg.json"

typedef struct T_TldGateCfg
{
	ICE_S32 iEn;                     
	ICE_S32 iInterval;               
	ICE_S32 iResendInterval;       
	ICE_U8 aucDeviceKey[TLD_GATE_KEY_LEN];        
	ICE_U8 aucDeviceSecret[TLD_GATE_KEY_LEN];    
	ICE_U8 aucProductKey[TLD_GATE_KEY_LEN];       
	ICE_U8 aucProductSecret[TLD_GATE_KEY_LEN];   
	ICE_U8 aucRouteUrl[TLD_GATE_MAX_ROUTESERVER_NUM][TLD_GATE_ROUTEURLLEN];  
	ICE_S32 iOpenGateTimeout;      
	ICE_S32 iCloseGateTimeout;    
	ICE_S32 iMode;				 
	ICE_S32 iCoilCheckTimeout;   
	ICE_U8 aucReserved[240];            
}T_TldGateCfg;
//////////////////////////////////////////////////////////////////////////


typedef struct T_TimeInfo{
	ICE_S32 iYear;  
	ICE_S32 iMon;   
	ICE_S32 iDay;   
	ICE_S32 iHour;  
	ICE_S32 iMin;   
	ICE_S32 iSec;  
}T_TimeInfo;

typedef struct T_TimeCfgInfo{
	ICE_S8 acReqSrcIp[16];
	ICE_S8 acReqSrcDesc[16];
	T_TimeInfo tLocalTimeInfo;
	ICE_S8 acResearve[256];
}T_TimeCfgInfo;

typedef struct tagT_ProductInfo
{
	ICE_S8 ProductModel[128];
	ICE_S8 HardwareModel[128];
} T_ProductInfo;


typedef enum tagE_DevAlarmInMode
{
	AlarmInMode_Default,	  
	AlarmInMode_Hdtrigger,     
	AlarmInMode_SecondGate,    
	AlarmInMode_IoRelateGate,  
	AlarmInMode_Count
}E_DevAlarmInMode;

typedef struct tagT_DevAlarmIn
{
	ICE_S32 Io_num;
	ICE_S32 Type; 
	E_DevAlarmInMode 	  Io_mode;
}T_DevAlarmIn;

typedef enum tagE_DevAlarmOutMode
{
	AlarmOutMode_None = 0,
	AlarmOutMode_StrobeLight,	
	AlarmOutMode_OpenGate, 		
	AlarmOutMode_SwitchLight, 	
	AlarmOutMode_Intercom		 
}E_DevAlarmOutMode;

typedef struct tagT_DevAlarmOutCfg
{
	ICE_S32 Io_num;
	E_DevAlarmOutMode 	  Io_mode;
}T_DevAlarmOutBindCfg;

typedef struct tagT_UartOperPro
{
	ICE_S8 szProtocolName[32];	//
	ICE_S32 len;				//
	ICE_S8 res[128];
} T_UartOperPro;

typedef struct tagT_UartBindPro
{
	ICE_S32 ProId;				
	ICE_S8 szProtocolName[32];	
} T_UartBindPro;


#define MaxProtocolNameLen    31

#define MaxProtocolNum    256

typedef enum tagE_PeripheralType
{
	Dpt_Uart,   
	Dpt_Rs232,  
	Dpt_Rs485,  
	Dpt_Eth,   
	Dpt_USB,    
	Dpt_Sd,    
	Dpt_Key,
	Dpt_PluckSwitch,    
	Dpt_IO,    
	Dpt_All,  
} E_PeripheralType;

typedef struct tagT_ProtocolInfo
{
	E_PeripheralType ePerType;                 
	ICE_S8 szProtocol[MaxProtocolNameLen + 1];  
} T_ProtocolInfo;

typedef struct tagT_ProtocolList
{
	ICE_S32 uiNum;
	T_ProtocolInfo atList[MaxProtocolNum];  
} T_ProtocolList;

typedef struct
{
	int alarm_in_type_sec;
	int which_for_hardtriger; 
	int alarm_in_type_third; 
	int alarm_in_type_fourth; 
	int related_talkbacks; 
	int u32Researve[17];
}ALARM_IN_EXT;

#define NETADDR_LEN (64)
typedef struct 
{
	ICE_S8 talk_status;  
	ICE_U8 link_netaddr[NETADDR_LEN];
	ICE_U8 reserved[48];
}ICE_TALK_INFO;

typedef struct
{
	int key_value; 
	int talk_state;  
	char talk_ip_addr[NETADDR_LEN];
	char reserevd[20];
}TalkState;

typedef struct
{
	unsigned char ucUID[32];
	unsigned char ucReserved[32];
}UID_PARAM;

typedef struct
{
	ICE_U8 u8UserModel[64];  
	ICE_U8 u8Reserved[32]; 
} UserModelParam;

typedef struct T_OsdInfoCfg{
	ICE_S32	iEnable;
	ICE_S32 iLocation;	
	ICE_S32 iType;		
	char acCustomInfo[MAX_OSD_TEXT];
	char acResrv[64];
}T_OsdInfoCfg;

typedef struct T_SnapOsdCfg{
	ICE_S32 ibgColorMode;	
	ICE_S32 iDateMode;		
	ICE_S32 iFontSize;		
	ICE_S32 iLineMode;		
	T_OsdInfoCfg tOsdInfoCfg[MAX_CUSTOM_OSD_LINE_NUM];
	char acResrv[128];
}T_SnapOsdCfg;

typedef struct
{
	int ratio;				
	int encoderMode;		
	int frameRate;			
	int encoder_vbr_cbr;	
	int videoQuality;		
	int maxStream;			
	int reserevd[10];
}EncoderParam;

typedef struct T_CamInfo{
	ICE_U32 uiCamType;
	ICE_U8 aucCamName[64];
	ICE_U8 aucResrv[256];
}T_CamInfo;


typedef struct T_User{
	ICE_U8 aucUseName[64];
	ICE_U8 aucPasswd[64];
	ICE_U8 aucUserId[32];
	ICE_U32 uiPrivilege;
	ICE_U8 aucResrv[32];
}T_User;

typedef struct T_UserList{
	T_User atUser[16];
	ICE_U32 uiUserCnt;
	ICE_U8 aucResrv[256];
}T_UserList;

#define MAX_ENCODER_NUM 4
typedef struct T_SingleEncoderParam{
	ICE_U32 uiChannel;
	ICE_U32 uiWidth;
	ICE_U32 uiHeight;
	ICE_U32 uiEncMode;
	ICE_U32 uiFps;
	ICE_U32 uiRateCtrl;
	ICE_U32 uiVideoQuality;
	ICE_U32 uiMaxBitRate;
	ICE_U8 aucResrv[64];
}T_SingleEncoderParam;

typedef struct T_EncoderParam
{
	ICE_U32 uiEncoderCnt;
	T_SingleEncoderParam tEncoder[MAX_ENCODER_NUM];
	ICE_U8 aucResrv[256];
}T_EncoderParam;

typedef struct T_GpioInParam
{
	ICE_U32 uiIdleState;
	ICE_U32 uiRelatedTalks;
	ICE_U8 aucResrv[128];
}T_GpioInParam;

typedef struct T_DisplayCfg{
	ICE_U32 uiAdDisplayTime;
	ICE_U32 uiPlateDisplayTime;
	ICE_U32 uiAdSwitchMode;
	ICE_U8 aucResrv[256];
}T_DisplayCfg;

typedef struct T_ClearAdPic{
	ICE_U32 uiPicType;
	ICE_U8 aucResrv[256];
}T_ClearAdPic;

#define MAX_KEY_NUM 8
typedef struct T_SingleKeyParam
{
	ICE_U32 uiRealValue;
	ICE_U32 uiFixValue;
	ICE_U8 aucResrv[64];
}T_SingleKeyParam;

typedef struct T_KeyParam
{
	ICE_U8 aucCtrlId[64];
	T_SingleKeyParam tSKeyParam[MAX_KEY_NUM];
	ICE_U8 aucResrv[256];
}T_KeyParam;

typedef struct T_RemoteDebug
{	
	ICE_U32 uiDebug;
	ICE_U8 aucResrv[128];
}T_RemoteDebug;

typedef struct T_RemoteCtrl
{
	ICE_U8 aucCtrlId[64];
	ICE_U32 uiKeyRealValue;
	ICE_U8 aucResrv[128];
}T_RemoteCtrl;

typedef struct
{
	ICE_U16 u16Identify;  
	ICE_U8 u8NetPriorType;  
	ICE_U8 u8DialingMode;   

	ICE_U8 u8SignalValue;   
	ICE_U8 u8NetworkState;  
	ICE_U8 u8Operators;     
	ICE_U8 u8ModuleState;     

	ICE_U8 u8NetType;        
	ICE_U8 u8Reserve; 
	ICE_U16 u16ExtParamSize;   

	//ICE_U8 u8ServerIPAddr[64]; 
	ICE_U8 u8ICCIDBuf[24];   

}ICE_4G_MODULE_PARAM;

typedef struct{
	ICE_U32 u32Result;           
	ICE_U8 u8ServerIPAddr[64]; 
	ICE_U8 aucResrv[128];
}ICE_4G_MODULE_SERVER_ADDR;

typedef struct T_LockParam
{
	ICE_U32 uiEnable;
	ICE_U32 uiModel;
	ICE_U8 aucId[32];
	ICE_U32 uiSocWarnValue;
	ICE_U32 uiSocFaultValue;
	ICE_U32 uiDelay;
	ICE_U32 uiMode;
	ICE_U8 aucResrv[128];
}T_LockParam;

#define KEY_LEN 64
#define NET_LEN 128
#define ROUTEURLLEN 256

#define MAX_ROUTESERVER_NUM 8

typedef struct T_TldCfg
{
	ICE_S32 iEn;                    
	ICE_S32 iInterval;              
	ICE_U8 aucDeviceKey[KEY_LEN];       
	ICE_U8 aucDeviceSecret[KEY_LEN];     
	ICE_U8 aucProductKey[KEY_LEN];      
	ICE_U8 aucProductSecret[KEY_LEN];    
	ICE_U8 aucRouteUrl[MAX_ROUTESERVER_NUM][ROUTEURLLEN];  
	ICE_U8 aucReserved[256];             
}T_TldCfg;

#ifdef __cplusplus
}
#endif


#endif // __ICE_COM_H__


